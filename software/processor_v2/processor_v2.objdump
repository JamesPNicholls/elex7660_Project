
processor_v2.elf:     file format elf32-littlenios2
processor_v2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010230

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000032cc memsz 0x000032cc flags r-x
    LOAD off    0x000042ec vaddr 0x000132ec paddr 0x00014c48 align 2**12
         filesz 0x0000195c memsz 0x0000195c flags rw-
    LOAD off    0x000065a4 vaddr 0x000165a4 paddr 0x000165a4 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000308c  00010230  00010230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000030  000132bc  000132bc  000042bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000195c  000132ec  00014c48  000042ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  000165a4  000165a4  000065a4  2**2
                  ALLOC, SMALL_DATA
  6 .memory       00000000  000166c4  000166c4  00005c48  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00005c48  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000658  00000000  00000000  00005c70  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00008fb7  00000000  00000000  000062c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000030c9  00000000  00000000  0000f27f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003249  00000000  00000000  00012348  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000ca0  00000000  00000000  00015594  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001f47  00000000  00000000  00016234  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000863  00000000  00000000  0001817b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000189e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000198  00000000  00000000  000189f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001a8ca  2**0
                  CONTENTS, READONLY
 18 .cpu          00000009  00000000  00000000  0001a8cd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001a8d6  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001a8d7  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0001a8d8  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0001a8e1  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0001a8ea  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  0001a8f3  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000032  00000000  00000000  0001a8fc  2**0
                  CONTENTS, READONLY
 26 .jdi          00004caf  00000000  00000000  0001a92e  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003f3a2  00000000  00000000  0001f5dd  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010230 l    d  .text	00000000 .text
000132bc l    d  .rodata	00000000 .rodata
000132ec l    d  .rwdata	00000000 .rwdata
000165a4 l    d  .bss	00000000 .bss
000166c4 l    d  .memory	00000000 .memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../processor_v2_bsp//obj/HAL/src/crt0.o
00010268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 graphic_top.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
000135c8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 alt_load.c
00010cc8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_times.c
00010e30 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010ee4 l     F .text	00000034 alt_dev_reg
000139ec l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000111d8 l     F .text	0000020c altera_avalon_jtag_uart_irq
000113e4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00011c18 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00011e38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00011f6c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00011f98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000123f8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00012558 l     F .text	0000003c alt_get_errno
00012594 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
000165bc g     O .bss	00000004 alt_instruction_exception_handler
00010db4 g     F .text	0000007c alt_main
000165c4 g     O .bss	00000100 alt_irq
00014c48 g       *ABS*	00000000 __flash_rwdata_start
0001046c g     F .text	00000038 checkvalid
00012a04 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010e6c g     F .text	00000078 times
00010020 g       *ABS*	00000000 __flash_exceptions_start
000165c0 g     O .bss	00000004 errno
000165a8 g     O .bss	00000004 alt_argv
0001cbf4 g       *ABS*	00000000 _gp
00014a74 g     O .rwdata	00000180 alt_fd_list
00012a28 g     F .text	00000090 alt_find_dev
00012de8 g     F .text	00000148 memcpy
00010cc0 g     F .text	00000008 _times_r
000124dc g     F .text	0000007c alt_io_redirect
000132bc g       *ABS*	00000000 __DTOR_END__
00012c84 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000115dc g     F .text	0000021c altera_avalon_jtag_uart_read
000104a4 g     F .text	00000048 frame_delay
000103f8 g     F .text	00000074 set_draw_data
00014c0b g     O .rwdata	00000004 joy_res_TL
00013473 g     O .rwdata	000000dc victory_0
00014c34 g     O .rwdata	00000004 alt_max_fd
000132ec g     O .rwdata	0000000b draw_data
00014c1c g     O .rwdata	00000004 _global_impure_ptr
000166c4 g       *ABS*	00000000 __bss_end
00012308 g     F .text	000000f0 alt_iic_isr_register
000128fc g     F .text	00000108 alt_tick
000122bc g     F .text	0000004c alt_ic_irq_enabled
00012860 g     F .text	0000009c alt_alarm_stop
00014bff g     O .rwdata	00000006 green
000165b0 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d4 alt_irq_handler
00014a4c g     O .rwdata	00000028 alt_dev_null
00011f4c g     F .text	00000020 alt_dcache_flush_all
00014c05 g     O .rwdata	00000006 red
00014c48 g       *ABS*	00000000 __ram_rwdata_end
00014c2c g     O .rwdata	00000008 alt_dev_list
000132ec g       *ABS*	00000000 __ram_rodata_end
000166c4 g       *ABS*	00000000 end
00011118 g     F .text	000000c0 altera_avalon_jtag_uart_init
00014c17 g     O .rwdata	00000004 joy_res_BR
000101d0 g     F .exceptions	00000060 alt_instruction_exception_entry
000132bc g       *ABS*	00000000 __CTOR_LIST__
0001c000 g       *ABS*	00000000 __alt_stack_pointer
00011c90 g     F .text	0000007c alt_avalon_timer_sc_init
000117f8 g     F .text	00000224 altera_avalon_jtag_uart_write
000130e0 g     F .text	00000180 __call_exitprocs
00010230 g     F .text	0000003c _start
000165b4 g     O .bss	00000004 _alt_tick_rate
00014c0f g     O .rwdata	00000004 joy_res_TR
00011a1c g     F .text	000001fc alt_avalon_spi_command
000165b8 g     O .bss	00000004 _alt_nticks
00010f50 g     F .text	00000064 alt_sys_init
00012fc8 g     F .text	00000118 __register_exitproc
00011484 g     F .text	00000068 altera_avalon_jtag_uart_close
00013260 g     F .text	00000028 .hidden __mulsi3
000132ec g       *ABS*	00000000 __ram_rwdata_start
000132bc g       *ABS*	00000000 __ram_rodata_start
00010fb4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00012bc0 g     F .text	000000c4 alt_get_fd
00012d6c g     F .text	0000007c memcmp
00011074 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000166c4 g       *ABS*	00000000 __alt_stack_base
000110c4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00012ab8 g     F .text	00000108 alt_find_file
00011fd4 g     F .text	000000a4 alt_dev_llist_insert
000165a4 g       *ABS*	00000000 __bss_start
000104ec g     F .text	00000788 main
000165ac g     O .bss	00000004 alt_envp
00014bf4 g     O .rwdata	00000005 clear_data
00011014 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00014c13 g     O .rwdata	00000004 joy_res_BL
00014c38 g     O .rwdata	00000004 alt_errno
0001359f g     O .rwdata	00000028 initdata
000132bc g       *ABS*	00000000 __CTOR_END__
0001354f g     O .rwdata	00000034 start_0
000132bc g       *ABS*	00000000 __flash_rodata_start
000132bc g       *ABS*	00000000 __DTOR_LIST__
00010f18 g     F .text	00000038 alt_irq_init
000127dc g     F .text	00000084 alt_release_fd
00012d20 g     F .text	00000014 atexit
00014c20 g     O .rwdata	00000004 _impure_ptr
000165a4 g     O .bss	00000004 alt_argc
000120d8 g     F .text	00000060 _do_dtors
0001035c g     F .text	0000009c set_draw_colour
00010020 g       .exceptions	00000000 alt_irq_entry
00014c24 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00012158 g     F .text	00000050 alt_ic_isr_register
00014c48 g       *ABS*	00000000 _edata
000166c4 g       *ABS*	00000000 _end
00010230 g       *ABS*	00000000 __ram_exceptions_end
000114ec g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00012230 g     F .text	0000008c alt_ic_irq_disable
00014bf9 g     O .rwdata	00000006 white
00010000 g       *ABS*	00000000 __alt_mem_memory
00012d34 g     F .text	00000038 exit
0001c000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
0001337f g     O .rwdata	000000f4 spank_1
00013288 g     F .text	00000034 _exit
00011d0c g     F .text	0000012c alt_alarm_start
00012f30 g     F .text	00000098 strlen
00012680 g     F .text	0000015c open
00010c74 g     F .text	0000004c clock
00012138 g     F .text	00000020 alt_icache_flush_all
00014c3c g     O .rwdata	00000004 alt_priority_mask
000121a8 g     F .text	00000088 alt_ic_irq_enable
0001026c g     F .text	000000f0 clear_screen
00013583 g     O .rwdata	0000001c clock_0
00014c40 g     O .rwdata	00000008 alt_alarm_list
00012078 g     F .text	00000060 _do_ctors
00011e74 g     F .text	000000d8 close
00010d30 g     F .text	00000084 alt_load
000132f7 g     O .rwdata	00000088 spank_0



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408c14 	ori	at,at,560
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d00 	call	101d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001426 	beq	r2,zero,1018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	00800074 	movhi	r2,1
   10140:	10997104 	addi	r2,r2,26052
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	00800074 	movhi	r2,1
   10158:	10997104 	addi	r2,r2,26052
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	1009883a 	mov	r4,r2
   10174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1017c:	0005313a 	rdctl	r2,ipending
   10180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	00000706 	br	101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	1085883a 	add	r2,r2,r2
   10194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a4:	003fe106 	br	1012c <_gp+0xffff3538>

    active = alt_irq_pending ();
   101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	103fdb1e 	bne	r2,zero,10120 <_gp+0xffff352c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b4:	0001883a 	nop
}
   101b8:	0001883a 	nop
   101bc:	e037883a 	mov	sp,fp
   101c0:	dfc00117 	ldw	ra,4(sp)
   101c4:	df000017 	ldw	fp,0(sp)
   101c8:	dec00204 	addi	sp,sp,8
   101cc:	f800283a 	ret

000101d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d0:	defffb04 	addi	sp,sp,-20
   101d4:	dfc00415 	stw	ra,16(sp)
   101d8:	df000315 	stw	fp,12(sp)
   101dc:	df000304 	addi	fp,sp,12
   101e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101e4:	00bfffc4 	movi	r2,-1
   101e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   101ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101f0:	d0a67217 	ldw	r2,-26168(gp)
   101f4:	10000726 	beq	r2,zero,10214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101f8:	d0a67217 	ldw	r2,-26168(gp)
   101fc:	e0fffd17 	ldw	r3,-12(fp)
   10200:	e1bffe17 	ldw	r6,-8(fp)
   10204:	e17fff17 	ldw	r5,-4(fp)
   10208:	1809883a 	mov	r4,r3
   1020c:	103ee83a 	callr	r2
   10210:	00000206 	br	1021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   10218:	0005883a 	mov	r2,zero
}
   1021c:	e037883a 	mov	sp,fp
   10220:	dfc00117 	ldw	ra,4(sp)
   10224:	df000017 	ldw	fp,0(sp)
   10228:	dec00204 	addi	sp,sp,8
   1022c:	f800283a 	ret

Disassembly of section .text:

00010230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10230:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10234:	def00014 	ori	sp,sp,49152
    movhi gp, %hi(_gp)
   10238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1023c:	d6b2fd14 	ori	gp,gp,52212
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10244:	10996914 	ori	r2,r2,26020

    movhi r3, %hi(__bss_end)
   10248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1024c:	18d9b114 	ori	r3,r3,26308

    beq r2, r3, 1f
   10250:	10c00326 	beq	r2,r3,10260 <_start+0x30>

0:
    stw zero, (r2)
   10254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1025c:	10fffd36 	bltu	r2,r3,10254 <_gp+0xffff3660>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10260:	0010d300 	call	10d30 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10264:	0010db40 	call	10db4 <alt_main>

00010268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10268:	003fff06 	br	10268 <_gp+0xffff3674>

0001026c <clear_screen>:

unsigned char clear_data[CLEAR_SIZE] = {CLEAR_COM, 0x00, 0x00, WIDTH, HEIGHT};

/* Non cursor functions*/
void clear_screen()
{
   1026c:	defffb04 	addi	sp,sp,-20
   10270:	dfc00415 	stw	ra,16(sp)
   10274:	df000315 	stw	fp,12(sp)
   10278:	df000304 	addi	fp,sp,12
    CLEAR_DCN;
   1027c:	008000b4 	movhi	r2,2
   10280:	10841004 	addi	r2,r2,4160
   10284:	00c000b4 	movhi	r3,2
   10288:	18c41004 	addi	r3,r3,4160
   1028c:	19000017 	ldw	r4,0(r3)
   10290:	00ffff84 	movi	r3,-2
   10294:	20c6703a 	and	r3,r4,r3
   10298:	10c00015 	stw	r3,0(r2)
    draw_data[1]    = 0x00;
   1029c:	00800074 	movhi	r2,1
   102a0:	108cbb04 	addi	r2,r2,13036
   102a4:	10000045 	stb	zero,1(r2)
    draw_data[2]    = 0x00;
   102a8:	00800074 	movhi	r2,1
   102ac:	108cbb04 	addi	r2,r2,13036
   102b0:	10000085 	stb	zero,2(r2)
    draw_data[3]    = HEIGHT;
   102b4:	00800074 	movhi	r2,1
   102b8:	108cbb04 	addi	r2,r2,13036
   102bc:	00c017c4 	movi	r3,95
   102c0:	10c000c5 	stb	r3,3(r2)
    draw_data[4]    = WIDTH;
   102c4:	00800074 	movhi	r2,1
   102c8:	108cbb04 	addi	r2,r2,13036
   102cc:	00c01fc4 	movi	r3,127
   102d0:	10c00105 	stb	r3,4(r2)
    draw_data[5]    = 0x00;
   102d4:	00800074 	movhi	r2,1
   102d8:	108cbb04 	addi	r2,r2,13036
   102dc:	10000145 	stb	zero,5(r2)
    draw_data[6]    = 0x00;
   102e0:	00800074 	movhi	r2,1
   102e4:	108cbb04 	addi	r2,r2,13036
   102e8:	10000185 	stb	zero,6(r2)
    draw_data[7]    = 0x00;
   102ec:	00800074 	movhi	r2,1
   102f0:	108cbb04 	addi	r2,r2,13036
   102f4:	100001c5 	stb	zero,7(r2)
    draw_data[8]    = 0x00;
   102f8:	00800074 	movhi	r2,1
   102fc:	108cbb04 	addi	r2,r2,13036
   10300:	10000205 	stb	zero,8(r2)
    draw_data[9]    = 0x00;
   10304:	00800074 	movhi	r2,1
   10308:	108cbb04 	addi	r2,r2,13036
   1030c:	10000245 	stb	zero,9(r2)
    draw_data[10]   = 0x00;
   10310:	00800074 	movhi	r2,1
   10314:	108cbb04 	addi	r2,r2,13036
   10318:	10000285 	stb	zero,10(r2)
    alt_avalon_spi_command(SPI_0_BASE, 0, DRAW_SIZE, draw_data, 0, NULL , 0);
   1031c:	d8000215 	stw	zero,8(sp)
   10320:	d8000115 	stw	zero,4(sp)
   10324:	d8000015 	stw	zero,0(sp)
   10328:	01c00074 	movhi	r7,1
   1032c:	39ccbb04 	addi	r7,r7,13036
   10330:	018002c4 	movi	r6,11
   10334:	000b883a 	mov	r5,zero
   10338:	010000b4 	movhi	r4,2
   1033c:	21040004 	addi	r4,r4,4096
   10340:	0011a1c0 	call	11a1c <alt_avalon_spi_command>
} 
   10344:	0001883a 	nop
   10348:	e037883a 	mov	sp,fp
   1034c:	dfc00117 	ldw	ra,4(sp)
   10350:	df000017 	ldw	fp,0(sp)
   10354:	dec00204 	addi	sp,sp,8
   10358:	f800283a 	ret

0001035c <set_draw_colour>:

void set_draw_colour(unsigned char col[6])
{
   1035c:	defffe04 	addi	sp,sp,-8
   10360:	df000115 	stw	fp,4(sp)
   10364:	df000104 	addi	fp,sp,4
   10368:	e13fff15 	stw	r4,-4(fp)
    draw_data[5]    = col[0];
   1036c:	e0bfff17 	ldw	r2,-4(fp)
   10370:	10c00003 	ldbu	r3,0(r2)
   10374:	00800074 	movhi	r2,1
   10378:	108cbb04 	addi	r2,r2,13036
   1037c:	10c00145 	stb	r3,5(r2)
    draw_data[6]    = col[1];
   10380:	e0bfff17 	ldw	r2,-4(fp)
   10384:	10c00043 	ldbu	r3,1(r2)
   10388:	00800074 	movhi	r2,1
   1038c:	108cbb04 	addi	r2,r2,13036
   10390:	10c00185 	stb	r3,6(r2)
    draw_data[7]    = col[2];
   10394:	e0bfff17 	ldw	r2,-4(fp)
   10398:	10c00083 	ldbu	r3,2(r2)
   1039c:	00800074 	movhi	r2,1
   103a0:	108cbb04 	addi	r2,r2,13036
   103a4:	10c001c5 	stb	r3,7(r2)
    draw_data[8]    = col[3];
   103a8:	e0bfff17 	ldw	r2,-4(fp)
   103ac:	10c000c3 	ldbu	r3,3(r2)
   103b0:	00800074 	movhi	r2,1
   103b4:	108cbb04 	addi	r2,r2,13036
   103b8:	10c00205 	stb	r3,8(r2)
    draw_data[9]    = col[4];
   103bc:	e0bfff17 	ldw	r2,-4(fp)
   103c0:	10c00103 	ldbu	r3,4(r2)
   103c4:	00800074 	movhi	r2,1
   103c8:	108cbb04 	addi	r2,r2,13036
   103cc:	10c00245 	stb	r3,9(r2)
    draw_data[10]   = col[5];
   103d0:	e0bfff17 	ldw	r2,-4(fp)
   103d4:	10c00143 	ldbu	r3,5(r2)
   103d8:	00800074 	movhi	r2,1
   103dc:	108cbb04 	addi	r2,r2,13036
   103e0:	10c00285 	stb	r3,10(r2)
    return;
   103e4:	0001883a 	nop
}
   103e8:	e037883a 	mov	sp,fp
   103ec:	df000017 	ldw	fp,0(sp)
   103f0:	dec00104 	addi	sp,sp,4
   103f4:	f800283a 	ret

000103f8 <set_draw_data>:

void set_draw_data( unsigned char *pos_d)
{
   103f8:	defffe04 	addi	sp,sp,-8
   103fc:	df000115 	stw	fp,4(sp)
   10400:	df000104 	addi	fp,sp,4
   10404:	e13fff15 	stw	r4,-4(fp)
    draw_data[1] = pos_d[0];
   10408:	e0bfff17 	ldw	r2,-4(fp)
   1040c:	10c00003 	ldbu	r3,0(r2)
   10410:	00800074 	movhi	r2,1
   10414:	108cbb04 	addi	r2,r2,13036
   10418:	10c00045 	stb	r3,1(r2)
    draw_data[2] = pos_d[1];
   1041c:	e0bfff17 	ldw	r2,-4(fp)
   10420:	10c00043 	ldbu	r3,1(r2)
   10424:	00800074 	movhi	r2,1
   10428:	108cbb04 	addi	r2,r2,13036
   1042c:	10c00085 	stb	r3,2(r2)
    draw_data[3] = pos_d[2];
   10430:	e0bfff17 	ldw	r2,-4(fp)
   10434:	10c00083 	ldbu	r3,2(r2)
   10438:	00800074 	movhi	r2,1
   1043c:	108cbb04 	addi	r2,r2,13036
   10440:	10c000c5 	stb	r3,3(r2)
    draw_data[4] = pos_d[3];
   10444:	e0bfff17 	ldw	r2,-4(fp)
   10448:	10c000c3 	ldbu	r3,3(r2)
   1044c:	00800074 	movhi	r2,1
   10450:	108cbb04 	addi	r2,r2,13036
   10454:	10c00105 	stb	r3,4(r2)
}
   10458:	0001883a 	nop
   1045c:	e037883a 	mov	sp,fp
   10460:	df000017 	ldw	fp,0(sp)
   10464:	dec00104 	addi	sp,sp,4
   10468:	f800283a 	ret

0001046c <checkvalid>:

//Waits for the 
void checkvalid()
{
   1046c:	deffff04 	addi	sp,sp,-4
   10470:	df000015 	stw	fp,0(sp)
   10474:	d839883a 	mov	fp,sp
    while(1)
    {
        if((*(int*)PIO_BASE) & VALID_MASK)
   10478:	008000b4 	movhi	r2,2
   1047c:	10841004 	addi	r2,r2,4160
   10480:	10800017 	ldw	r2,0(r2)
   10484:	10803c0c 	andi	r2,r2,240
   10488:	1000011e 	bne	r2,zero,10490 <checkvalid+0x24>
        {
            return;
        }    
    }
   1048c:	003ffa06 	br	10478 <_gp+0xffff3884>
{
    while(1)
    {
        if((*(int*)PIO_BASE) & VALID_MASK)
        {
            return;
   10490:	0001883a 	nop
        }    
    }
}
   10494:	e037883a 	mov	sp,fp
   10498:	df000017 	ldw	fp,0(sp)
   1049c:	dec00104 	addi	sp,sp,4
   104a0:	f800283a 	ret

000104a4 <frame_delay>:

void frame_delay()
{
   104a4:	defffd04 	addi	sp,sp,-12
   104a8:	dfc00215 	stw	ra,8(sp)
   104ac:	df000115 	stw	fp,4(sp)
   104b0:	df000104 	addi	fp,sp,4
    clock_t start_time = clock();
   104b4:	0010c740 	call	10c74 <clock>
   104b8:	e0bfff15 	stw	r2,-4(fp)
    while( clock() < (start_time + (int)1));
   104bc:	0001883a 	nop
   104c0:	0010c740 	call	10c74 <clock>
   104c4:	1007883a 	mov	r3,r2
   104c8:	e0bfff17 	ldw	r2,-4(fp)
   104cc:	10800044 	addi	r2,r2,1
   104d0:	18bffb36 	bltu	r3,r2,104c0 <_gp+0xffff38cc>
    return;
   104d4:	0001883a 	nop
}
   104d8:	e037883a 	mov	sp,fp
   104dc:	dfc00117 	ldw	ra,4(sp)
   104e0:	df000017 	ldw	fp,0(sp)
   104e4:	dec00204 	addi	sp,sp,8
   104e8:	f800283a 	ret

000104ec <main>:
		     0xA4, 0xA8, 0x3F, 0xAD, 0x8E, 0xB0, 0x00,
		     0xB1, 0x31, 0xB3, 0x10, 0xBB, 0x3A, 0xBE,
		     0x3E, 0x2E, 0xAF, 0x26, 0x01} ;

int main()
{
   104ec:	defff504 	addi	sp,sp,-44
   104f0:	dfc00a15 	stw	ra,40(sp)
   104f4:	df000915 	stw	fp,36(sp)
   104f8:	df000904 	addi	fp,sp,36
	int x, y ; // array indices used to access pixel data in image arra
	unsigned char data;  // temporary storage of byte to be sent to display
	unsigned long int PIO_INPUT;
	unsigned int state_var; 
	unsigned char x_val, y_val;
	unsigned char fill_com[2] = {0x26, 1};
   104fc:	00800984 	movi	r2,38
   10500:	e0bffd85 	stb	r2,-10(fp)
   10504:	00800044 	movi	r2,1
   10508:	e0bffdc5 	stb	r2,-9(fp)
	
	// send controller initialization sequence
	CLEAR_DCN;
   1050c:	008000b4 	movhi	r2,2
   10510:	10841004 	addi	r2,r2,4160
   10514:	00c000b4 	movhi	r3,2
   10518:	18c41004 	addi	r3,r3,4160
   1051c:	19000017 	ldw	r4,0(r3)
   10520:	00ffff84 	movi	r3,-2
   10524:	20c6703a 	and	r3,r4,r3
   10528:	10c00015 	stw	r3,0(r2)
	alt_avalon_spi_command(SPI_0_BASE, 0, INITDATA_SIZE, initdata, 0, NULL, 0) ;
   1052c:	d8000215 	stw	zero,8(sp)
   10530:	d8000115 	stw	zero,4(sp)
   10534:	d8000015 	stw	zero,0(sp)
   10538:	01c00074 	movhi	r7,1
   1053c:	39cd67c4 	addi	r7,r7,13727
   10540:	01800a04 	movi	r6,40
   10544:	000b883a 	mov	r5,zero
   10548:	010000b4 	movhi	r4,2
   1054c:	21040004 	addi	r4,r4,4096
   10550:	0011a1c0 	call	11a1c <alt_avalon_spi_command>
	clear_screen();
   10554:	001026c0 	call	1026c <clear_screen>
	unsigned char flags[6] = {1,1,1,1,1,1};
   10558:	00800044 	movi	r2,1
   1055c:	e0bffe05 	stb	r2,-8(fp)
   10560:	00800044 	movi	r2,1
   10564:	e0bffe45 	stb	r2,-7(fp)
   10568:	00800044 	movi	r2,1
   1056c:	e0bffe85 	stb	r2,-6(fp)
   10570:	00800044 	movi	r2,1
   10574:	e0bffec5 	stb	r2,-5(fp)
   10578:	00800044 	movi	r2,1
   1057c:	e0bfff05 	stb	r2,-4(fp)
   10580:	00800044 	movi	r2,1
   10584:	e0bfff45 	stb	r2,-3(fp)


	//alt_avalon_spi_command(SPI_0_BASE, 0, CLEAR_SIZE, clear_data, 0, NULL, 0);
	 while(1)
	 {
	 	PIO_INPUT = (*(int*)PIO_BASE);	
   10588:	008000b4 	movhi	r2,2
   1058c:	10841004 	addi	r2,r2,4160
   10590:	10800017 	ldw	r2,0(r2)
   10594:	e0bffb15 	stw	r2,-20(fp)
	 	state_var = (PIO_INPUT >> 1) & STATE_MASK;
   10598:	e0bffb17 	ldw	r2,-20(fp)
   1059c:	1004d07a 	srli	r2,r2,1
   105a0:	108001cc 	andi	r2,r2,7
   105a4:	e0bffc15 	stw	r2,-16(fp)
		x_val     = (PIO_INPUT  >> 24) & 0xf;
   105a8:	e0bffb17 	ldw	r2,-20(fp)
   105ac:	1004d63a 	srli	r2,r2,24
   105b0:	108003cc 	andi	r2,r2,15
   105b4:	e0bffd05 	stb	r2,-12(fp)
		y_val 	  = (PIO_INPUT  >> 16) & 0xf;
   105b8:	e0bffb17 	ldw	r2,-20(fp)
   105bc:	1004d43a 	srli	r2,r2,16
   105c0:	108003cc 	andi	r2,r2,15
   105c4:	e0bffd45 	stb	r2,-11(fp)
		

		frame_delay();
   105c8:	00104a40 	call	104a4 <frame_delay>
	 	switch (state_var)
   105cc:	e0bffc17 	ldw	r2,-16(fp)
   105d0:	108001a8 	cmpgeui	r2,r2,6
   105d4:	1001861e 	bne	r2,zero,10bf0 <main+0x704>
   105d8:	e0bffc17 	ldw	r2,-16(fp)
   105dc:	100690ba 	slli	r3,r2,2
   105e0:	00800074 	movhi	r2,1
   105e4:	10817d04 	addi	r2,r2,1524
   105e8:	1885883a 	add	r2,r3,r2
   105ec:	10800017 	ldw	r2,0(r2)
   105f0:	1000683a 	jmp	r2
   105f4:	0001060c 	andi	zero,zero,1048
   105f8:	000106a4 	muli	zero,zero,1050
   105fc:	0001088c 	andi	zero,zero,1058
   10600:	0001098c 	andi	zero,zero,1062
   10604:	00010a1c 	xori	zero,zero,1064
   10608:	00010aac 	andhi	zero,zero,1066
	 	{
	 	case start_up   :
			if(flags[0])
   1060c:	e0bffe03 	ldbu	r2,-8(fp)
   10610:	10803fcc 	andi	r2,r2,255
   10614:	10000526 	beq	r2,zero,1062c <main+0x140>
			{
				clear_screen();
   10618:	001026c0 	call	1026c <clear_screen>
				flags[0] = 0;
   1061c:	e03ffe05 	stb	zero,-8(fp)
				flags[5] = 1;
   10620:	00800044 	movi	r2,1
   10624:	e0bfff45 	stb	r2,-3(fp)
				
				
			
	 		// fill framebuffer - note array starts from top left going across rows,
  	 		// but must fill buffer from top left, going down columns.
			break;
   10628:	00019006 	br	10c6c <main+0x780>
				flags[0] = 0;
				flags[5] = 1;
			}
			else
			{
				set_draw_colour(white);
   1062c:	d1200144 	addi	r4,gp,-32763
   10630:	001035c0 	call	1035c <set_draw_colour>
				for ( x=0 ; x < START_SIZE/4 ; x++)
   10634:	e03ffa15 	stw	zero,-24(fp)
   10638:	00001606 	br	10694 <main+0x1a8>
				{
					set_draw_data(&start_0[x*4]);
   1063c:	e0bffa17 	ldw	r2,-24(fp)
   10640:	1085883a 	add	r2,r2,r2
   10644:	1085883a 	add	r2,r2,r2
   10648:	1007883a 	mov	r3,r2
   1064c:	00800074 	movhi	r2,1
   10650:	108d53c4 	addi	r2,r2,13647
   10654:	1885883a 	add	r2,r3,r2
   10658:	1009883a 	mov	r4,r2
   1065c:	00103f80 	call	103f8 <set_draw_data>
					alt_avalon_spi_command(SPI_0_BASE, 0, DRAW_SIZE, draw_data, 0, NULL, 0);
   10660:	d8000215 	stw	zero,8(sp)
   10664:	d8000115 	stw	zero,4(sp)
   10668:	d8000015 	stw	zero,0(sp)
   1066c:	01c00074 	movhi	r7,1
   10670:	39ccbb04 	addi	r7,r7,13036
   10674:	018002c4 	movi	r6,11
   10678:	000b883a 	mov	r5,zero
   1067c:	010000b4 	movhi	r4,2
   10680:	21040004 	addi	r4,r4,4096
   10684:	0011a1c0 	call	11a1c <alt_avalon_spi_command>
				flags[5] = 1;
			}
			else
			{
				set_draw_colour(white);
				for ( x=0 ; x < START_SIZE/4 ; x++)
   10688:	e0bffa17 	ldw	r2,-24(fp)
   1068c:	10800044 	addi	r2,r2,1
   10690:	e0bffa15 	stw	r2,-24(fp)
   10694:	e0bffa17 	ldw	r2,-24(fp)
   10698:	10800350 	cmplti	r2,r2,13
   1069c:	103fe71e 	bne	r2,zero,1063c <_gp+0xffff3a48>
				
				
			
	 		// fill framebuffer - note array starts from top left going across rows,
  	 		// but must fill buffer from top left, going down columns.
			break;
   106a0:	00017206 	br	10c6c <main+0x780>
	 	case game_1		:
		// james game
			if(flags[1])
   106a4:	e0bffe43 	ldbu	r2,-7(fp)
   106a8:	10803fcc 	andi	r2,r2,255
   106ac:	10000326 	beq	r2,zero,106bc <main+0x1d0>
			{
				clear_screen();
   106b0:	001026c0 	call	1026c <clear_screen>
				flags[1]=0;
   106b4:	e03ffe45 	stb	zero,-7(fp)
						alt_avalon_spi_command(SPI_0_BASE, 0, DRAW_SIZE, draw_data, 0, NULL, 0);
					}					
				}

			}
	 		break;
   106b8:	00016c06 	br	10c6c <main+0x780>
				clear_screen();
				flags[1]=0;
			}
			else
			{
				set_draw_colour(red);
   106bc:	d1200444 	addi	r4,gp,-32751
   106c0:	001035c0 	call	1035c <set_draw_colour>
				set_draw_data(joy_res_TR);
   106c4:	d12006c4 	addi	r4,gp,-32741
   106c8:	00103f80 	call	103f8 <set_draw_data>
				alt_avalon_spi_command(SPI_0_BASE, 0, DRAW_SIZE, draw_data, 0, NULL, 0);
   106cc:	d8000215 	stw	zero,8(sp)
   106d0:	d8000115 	stw	zero,4(sp)
   106d4:	d8000015 	stw	zero,0(sp)
   106d8:	01c00074 	movhi	r7,1
   106dc:	39ccbb04 	addi	r7,r7,13036
   106e0:	018002c4 	movi	r6,11
   106e4:	000b883a 	mov	r5,zero
   106e8:	010000b4 	movhi	r4,2
   106ec:	21040004 	addi	r4,r4,4096
   106f0:	0011a1c0 	call	11a1c <alt_avalon_spi_command>
				set_draw_data(joy_res_BL);
   106f4:	d12007c4 	addi	r4,gp,-32737
   106f8:	00103f80 	call	103f8 <set_draw_data>
				alt_avalon_spi_command(SPI_0_BASE, 0, DRAW_SIZE, draw_data, 0, NULL, 0);
   106fc:	d8000215 	stw	zero,8(sp)
   10700:	d8000115 	stw	zero,4(sp)
   10704:	d8000015 	stw	zero,0(sp)
   10708:	01c00074 	movhi	r7,1
   1070c:	39ccbb04 	addi	r7,r7,13036
   10710:	018002c4 	movi	r6,11
   10714:	000b883a 	mov	r5,zero
   10718:	010000b4 	movhi	r4,2
   1071c:	21040004 	addi	r4,r4,4096
   10720:	0011a1c0 	call	11a1c <alt_avalon_spi_command>
				set_draw_data(joy_res_TL);
   10724:	d12005c4 	addi	r4,gp,-32745
   10728:	00103f80 	call	103f8 <set_draw_data>
				alt_avalon_spi_command(SPI_0_BASE, 0, DRAW_SIZE, draw_data, 0, NULL, 0);
   1072c:	d8000215 	stw	zero,8(sp)
   10730:	d8000115 	stw	zero,4(sp)
   10734:	d8000015 	stw	zero,0(sp)
   10738:	01c00074 	movhi	r7,1
   1073c:	39ccbb04 	addi	r7,r7,13036
   10740:	018002c4 	movi	r6,11
   10744:	000b883a 	mov	r5,zero
   10748:	010000b4 	movhi	r4,2
   1074c:	21040004 	addi	r4,r4,4096
   10750:	0011a1c0 	call	11a1c <alt_avalon_spi_command>
				set_draw_data(joy_res_BR);
   10754:	d12008c4 	addi	r4,gp,-32733
   10758:	00103f80 	call	103f8 <set_draw_data>
				alt_avalon_spi_command(SPI_0_BASE, 0, DRAW_SIZE, draw_data, 0, NULL, 0);
   1075c:	d8000215 	stw	zero,8(sp)
   10760:	d8000115 	stw	zero,4(sp)
   10764:	d8000015 	stw	zero,0(sp)
   10768:	01c00074 	movhi	r7,1
   1076c:	39ccbb04 	addi	r7,r7,13036
   10770:	018002c4 	movi	r6,11
   10774:	000b883a 	mov	r5,zero
   10778:	010000b4 	movhi	r4,2
   1077c:	21040004 	addi	r4,r4,4096
   10780:	0011a1c0 	call	11a1c <alt_avalon_spi_command>
				

				if(x_val)
   10784:	e0bffd03 	ldbu	r2,-12(fp)
   10788:	10002026 	beq	r2,zero,1080c <main+0x320>
				{
					if(y_val)
   1078c:	e0bffd43 	ldbu	r2,-11(fp)
   10790:	10000f26 	beq	r2,zero,107d0 <main+0x2e4>
					{
						set_draw_colour(green);
   10794:	d12002c4 	addi	r4,gp,-32757
   10798:	001035c0 	call	1035c <set_draw_colour>
						set_draw_data(joy_res_TL);
   1079c:	d12005c4 	addi	r4,gp,-32745
   107a0:	00103f80 	call	103f8 <set_draw_data>
						alt_avalon_spi_command(SPI_0_BASE, 0, DRAW_SIZE, draw_data, 0, NULL, 0);
   107a4:	d8000215 	stw	zero,8(sp)
   107a8:	d8000115 	stw	zero,4(sp)
   107ac:	d8000015 	stw	zero,0(sp)
   107b0:	01c00074 	movhi	r7,1
   107b4:	39ccbb04 	addi	r7,r7,13036
   107b8:	018002c4 	movi	r6,11
   107bc:	000b883a 	mov	r5,zero
   107c0:	010000b4 	movhi	r4,2
   107c4:	21040004 	addi	r4,r4,4096
   107c8:	0011a1c0 	call	11a1c <alt_avalon_spi_command>
						alt_avalon_spi_command(SPI_0_BASE, 0, DRAW_SIZE, draw_data, 0, NULL, 0);
					}					
				}

			}
	 		break;
   107cc:	00012706 	br	10c6c <main+0x780>
						set_draw_data(joy_res_TL);
						alt_avalon_spi_command(SPI_0_BASE, 0, DRAW_SIZE, draw_data, 0, NULL, 0);
					}
					else
					{
						set_draw_colour(green);
   107d0:	d12002c4 	addi	r4,gp,-32757
   107d4:	001035c0 	call	1035c <set_draw_colour>
						set_draw_data(joy_res_TR);
   107d8:	d12006c4 	addi	r4,gp,-32741
   107dc:	00103f80 	call	103f8 <set_draw_data>
						alt_avalon_spi_command(SPI_0_BASE, 0, DRAW_SIZE, draw_data, 0, NULL, 0);
   107e0:	d8000215 	stw	zero,8(sp)
   107e4:	d8000115 	stw	zero,4(sp)
   107e8:	d8000015 	stw	zero,0(sp)
   107ec:	01c00074 	movhi	r7,1
   107f0:	39ccbb04 	addi	r7,r7,13036
   107f4:	018002c4 	movi	r6,11
   107f8:	000b883a 	mov	r5,zero
   107fc:	010000b4 	movhi	r4,2
   10800:	21040004 	addi	r4,r4,4096
   10804:	0011a1c0 	call	11a1c <alt_avalon_spi_command>
						alt_avalon_spi_command(SPI_0_BASE, 0, DRAW_SIZE, draw_data, 0, NULL, 0);
					}					
				}

			}
	 		break;
   10808:	00011806 	br	10c6c <main+0x780>
					}

				}
				else
				{
					if(y_val)
   1080c:	e0bffd43 	ldbu	r2,-11(fp)
   10810:	10000f26 	beq	r2,zero,10850 <main+0x364>
					{
						set_draw_colour(green);
   10814:	d12002c4 	addi	r4,gp,-32757
   10818:	001035c0 	call	1035c <set_draw_colour>
						set_draw_data(joy_res_BL);
   1081c:	d12007c4 	addi	r4,gp,-32737
   10820:	00103f80 	call	103f8 <set_draw_data>
						alt_avalon_spi_command(SPI_0_BASE, 0, DRAW_SIZE, draw_data, 0, NULL, 0);	
   10824:	d8000215 	stw	zero,8(sp)
   10828:	d8000115 	stw	zero,4(sp)
   1082c:	d8000015 	stw	zero,0(sp)
   10830:	01c00074 	movhi	r7,1
   10834:	39ccbb04 	addi	r7,r7,13036
   10838:	018002c4 	movi	r6,11
   1083c:	000b883a 	mov	r5,zero
   10840:	010000b4 	movhi	r4,2
   10844:	21040004 	addi	r4,r4,4096
   10848:	0011a1c0 	call	11a1c <alt_avalon_spi_command>
						alt_avalon_spi_command(SPI_0_BASE, 0, DRAW_SIZE, draw_data, 0, NULL, 0);
					}					
				}

			}
	 		break;
   1084c:	00010706 	br	10c6c <main+0x780>
						set_draw_data(joy_res_BL);
						alt_avalon_spi_command(SPI_0_BASE, 0, DRAW_SIZE, draw_data, 0, NULL, 0);	
					}
					else
					{
						set_draw_colour(green);
   10850:	d12002c4 	addi	r4,gp,-32757
   10854:	001035c0 	call	1035c <set_draw_colour>
						set_draw_data(joy_res_BR);
   10858:	d12008c4 	addi	r4,gp,-32733
   1085c:	00103f80 	call	103f8 <set_draw_data>
						alt_avalon_spi_command(SPI_0_BASE, 0, DRAW_SIZE, draw_data, 0, NULL, 0);
   10860:	d8000215 	stw	zero,8(sp)
   10864:	d8000115 	stw	zero,4(sp)
   10868:	d8000015 	stw	zero,0(sp)
   1086c:	01c00074 	movhi	r7,1
   10870:	39ccbb04 	addi	r7,r7,13036
   10874:	018002c4 	movi	r6,11
   10878:	000b883a 	mov	r5,zero
   1087c:	010000b4 	movhi	r4,2
   10880:	21040004 	addi	r4,r4,4096
   10884:	0011a1c0 	call	11a1c <alt_avalon_spi_command>
					}					
				}

			}
	 		break;
   10888:	0000f806 	br	10c6c <main+0x780>

	 	case game_2		:
			if(flags[2])
   1088c:	e0bffe83 	ldbu	r2,-6(fp)
   10890:	10803fcc 	andi	r2,r2,255
   10894:	10000326 	beq	r2,zero,108a4 <main+0x3b8>
			{
				clear_screen();
   10898:	001026c0 	call	1026c <clear_screen>
				flags[2]=0;
   1089c:	e03ffe85 	stb	zero,-6(fp)
					set_draw_data(&clock_0[x*4]);
					alt_avalon_spi_command(SPI_0_BASE, 0, DRAW_SIZE, draw_data, 1, NULL, 0);
				}

			} 
	 		break;
   108a0:	0000f206 	br	10c6c <main+0x780>
				clear_screen();
				flags[2]=0;
			}
			else
			{
				for(x = 0; x < CLOCK_SIZE/4; x++)
   108a4:	e03ffa15 	stw	zero,-24(fp)
   108a8:	00003406 	br	1097c <main+0x490>
				{
					set_draw_colour(white);
   108ac:	d1200144 	addi	r4,gp,-32763
   108b0:	001035c0 	call	1035c <set_draw_colour>
					if(x == 0)
   108b4:	e0bffa17 	ldw	r2,-24(fp)
   108b8:	10000c1e 	bne	r2,zero,108ec <main+0x400>
					{
						fill_com[1] = 0;						
   108bc:	e03ffdc5 	stb	zero,-9(fp)
						alt_avalon_spi_command(SPI_0_BASE, 0, 2, fill_com, 0, NULL, 0); // clear fill
   108c0:	e0bffd84 	addi	r2,fp,-10
   108c4:	d8000215 	stw	zero,8(sp)
   108c8:	d8000115 	stw	zero,4(sp)
   108cc:	d8000015 	stw	zero,0(sp)
   108d0:	100f883a 	mov	r7,r2
   108d4:	01800084 	movi	r6,2
   108d8:	000b883a 	mov	r5,zero
   108dc:	010000b4 	movhi	r4,2
   108e0:	21040004 	addi	r4,r4,4096
   108e4:	0011a1c0 	call	11a1c <alt_avalon_spi_command>
   108e8:	00000d06 	br	10920 <main+0x434>
					}
					else
					{						
						fill_com[1] = 1;
   108ec:	00800044 	movi	r2,1
   108f0:	e0bffdc5 	stb	r2,-9(fp)
						alt_avalon_spi_command(SPI_0_BASE, 0, 2, fill_com, 1, NULL, 0); // clear fill
   108f4:	e0fffd84 	addi	r3,fp,-10
   108f8:	d8000215 	stw	zero,8(sp)
   108fc:	d8000115 	stw	zero,4(sp)
   10900:	00800044 	movi	r2,1
   10904:	d8800015 	stw	r2,0(sp)
   10908:	180f883a 	mov	r7,r3
   1090c:	01800084 	movi	r6,2
   10910:	000b883a 	mov	r5,zero
   10914:	010000b4 	movhi	r4,2
   10918:	21040004 	addi	r4,r4,4096
   1091c:	0011a1c0 	call	11a1c <alt_avalon_spi_command>
					}
					set_draw_data(&clock_0[x*4]);
   10920:	e0bffa17 	ldw	r2,-24(fp)
   10924:	1085883a 	add	r2,r2,r2
   10928:	1085883a 	add	r2,r2,r2
   1092c:	1007883a 	mov	r3,r2
   10930:	00800074 	movhi	r2,1
   10934:	108d60c4 	addi	r2,r2,13699
   10938:	1885883a 	add	r2,r3,r2
   1093c:	1009883a 	mov	r4,r2
   10940:	00103f80 	call	103f8 <set_draw_data>
					alt_avalon_spi_command(SPI_0_BASE, 0, DRAW_SIZE, draw_data, 1, NULL, 0);
   10944:	d8000215 	stw	zero,8(sp)
   10948:	d8000115 	stw	zero,4(sp)
   1094c:	00800044 	movi	r2,1
   10950:	d8800015 	stw	r2,0(sp)
   10954:	01c00074 	movhi	r7,1
   10958:	39ccbb04 	addi	r7,r7,13036
   1095c:	018002c4 	movi	r6,11
   10960:	000b883a 	mov	r5,zero
   10964:	010000b4 	movhi	r4,2
   10968:	21040004 	addi	r4,r4,4096
   1096c:	0011a1c0 	call	11a1c <alt_avalon_spi_command>
				clear_screen();
				flags[2]=0;
			}
			else
			{
				for(x = 0; x < CLOCK_SIZE/4; x++)
   10970:	e0bffa17 	ldw	r2,-24(fp)
   10974:	10800044 	addi	r2,r2,1
   10978:	e0bffa15 	stw	r2,-24(fp)
   1097c:	e0bffa17 	ldw	r2,-24(fp)
   10980:	108001d0 	cmplti	r2,r2,7
   10984:	103fc91e 	bne	r2,zero,108ac <_gp+0xffff3cb8>
					set_draw_data(&clock_0[x*4]);
					alt_avalon_spi_command(SPI_0_BASE, 0, DRAW_SIZE, draw_data, 1, NULL, 0);
				}

			} 
	 		break;
   10988:	0000b806 	br	10c6c <main+0x780>

	 	case game_3		:
			if(flags[3])
   1098c:	e0bffec3 	ldbu	r2,-5(fp)
   10990:	10803fcc 	andi	r2,r2,255
   10994:	10000326 	beq	r2,zero,109a4 <main+0x4b8>
			{
				clear_screen();
   10998:	001026c0 	call	1026c <clear_screen>
				flags[3]=0;
   1099c:	e03ffec5 	stb	zero,-5(fp)
				{
					set_draw_data(&spank_0[x*4]);
					alt_avalon_spi_command(SPI_0_BASE, 0, DRAW_SIZE, draw_data, 0, NULL, 0);
				}
	 		}
	 		break;
   109a0:	0000b206 	br	10c6c <main+0x780>
				clear_screen();
				flags[3]=0;
			}
			else
			{
				set_draw_colour(white);
   109a4:	d1200144 	addi	r4,gp,-32763
   109a8:	001035c0 	call	1035c <set_draw_colour>
				for ( x=0 ; x < SPANK_0_SIZE/4 ; x++)
   109ac:	e03ffa15 	stw	zero,-24(fp)
   109b0:	00001606 	br	10a0c <main+0x520>
				{
					set_draw_data(&spank_0[x*4]);
   109b4:	e0bffa17 	ldw	r2,-24(fp)
   109b8:	1085883a 	add	r2,r2,r2
   109bc:	1085883a 	add	r2,r2,r2
   109c0:	1007883a 	mov	r3,r2
   109c4:	00800074 	movhi	r2,1
   109c8:	108cbdc4 	addi	r2,r2,13047
   109cc:	1885883a 	add	r2,r3,r2
   109d0:	1009883a 	mov	r4,r2
   109d4:	00103f80 	call	103f8 <set_draw_data>
					alt_avalon_spi_command(SPI_0_BASE, 0, DRAW_SIZE, draw_data, 0, NULL, 0);
   109d8:	d8000215 	stw	zero,8(sp)
   109dc:	d8000115 	stw	zero,4(sp)
   109e0:	d8000015 	stw	zero,0(sp)
   109e4:	01c00074 	movhi	r7,1
   109e8:	39ccbb04 	addi	r7,r7,13036
   109ec:	018002c4 	movi	r6,11
   109f0:	000b883a 	mov	r5,zero
   109f4:	010000b4 	movhi	r4,2
   109f8:	21040004 	addi	r4,r4,4096
   109fc:	0011a1c0 	call	11a1c <alt_avalon_spi_command>
				flags[3]=0;
			}
			else
			{
				set_draw_colour(white);
				for ( x=0 ; x < SPANK_0_SIZE/4 ; x++)
   10a00:	e0bffa17 	ldw	r2,-24(fp)
   10a04:	10800044 	addi	r2,r2,1
   10a08:	e0bffa15 	stw	r2,-24(fp)
   10a0c:	e0bffa17 	ldw	r2,-24(fp)
   10a10:	10800890 	cmplti	r2,r2,34
   10a14:	103fe71e 	bne	r2,zero,109b4 <_gp+0xffff3dc0>
				{
					set_draw_data(&spank_0[x*4]);
					alt_avalon_spi_command(SPI_0_BASE, 0, DRAW_SIZE, draw_data, 0, NULL, 0);
				}
	 		}
	 		break;
   10a18:	00009406 	br	10c6c <main+0x780>

		case harder		:
			if(flags[4])
   10a1c:	e0bfff03 	ldbu	r2,-4(fp)
   10a20:	10803fcc 	andi	r2,r2,255
   10a24:	10000326 	beq	r2,zero,10a34 <main+0x548>
			{
				clear_screen();
   10a28:	001026c0 	call	1026c <clear_screen>
				flags[4]=0;
   10a2c:	e03fff05 	stb	zero,-4(fp)
				{
					set_draw_data(&spank_1[x*4]);
					alt_avalon_spi_command(SPI_0_BASE, 0, DRAW_SIZE, draw_data, 0, NULL, 0);
				}
			}
	 		break;
   10a30:	00008e06 	br	10c6c <main+0x780>
				clear_screen();
				flags[4]=0;
			}
			else
			{
				set_draw_colour(white);
   10a34:	d1200144 	addi	r4,gp,-32763
   10a38:	001035c0 	call	1035c <set_draw_colour>
				for ( x=0 ; x < SPANK_1_SIZE/4 ; x++)
   10a3c:	e03ffa15 	stw	zero,-24(fp)
   10a40:	00001606 	br	10a9c <main+0x5b0>
				{
					set_draw_data(&spank_1[x*4]);
   10a44:	e0bffa17 	ldw	r2,-24(fp)
   10a48:	1085883a 	add	r2,r2,r2
   10a4c:	1085883a 	add	r2,r2,r2
   10a50:	1007883a 	mov	r3,r2
   10a54:	00800074 	movhi	r2,1
   10a58:	108cdfc4 	addi	r2,r2,13183
   10a5c:	1885883a 	add	r2,r3,r2
   10a60:	1009883a 	mov	r4,r2
   10a64:	00103f80 	call	103f8 <set_draw_data>
					alt_avalon_spi_command(SPI_0_BASE, 0, DRAW_SIZE, draw_data, 0, NULL, 0);
   10a68:	d8000215 	stw	zero,8(sp)
   10a6c:	d8000115 	stw	zero,4(sp)
   10a70:	d8000015 	stw	zero,0(sp)
   10a74:	01c00074 	movhi	r7,1
   10a78:	39ccbb04 	addi	r7,r7,13036
   10a7c:	018002c4 	movi	r6,11
   10a80:	000b883a 	mov	r5,zero
   10a84:	010000b4 	movhi	r4,2
   10a88:	21040004 	addi	r4,r4,4096
   10a8c:	0011a1c0 	call	11a1c <alt_avalon_spi_command>
				flags[4]=0;
			}
			else
			{
				set_draw_colour(white);
				for ( x=0 ; x < SPANK_1_SIZE/4 ; x++)
   10a90:	e0bffa17 	ldw	r2,-24(fp)
   10a94:	10800044 	addi	r2,r2,1
   10a98:	e0bffa15 	stw	r2,-24(fp)
   10a9c:	e0bffa17 	ldw	r2,-24(fp)
   10aa0:	10800f50 	cmplti	r2,r2,61
   10aa4:	103fe71e 	bne	r2,zero,10a44 <_gp+0xffff3e50>
				{
					set_draw_data(&spank_1[x*4]);
					alt_avalon_spi_command(SPI_0_BASE, 0, DRAW_SIZE, draw_data, 0, NULL, 0);
				}
			}
	 		break;
   10aa8:	00007006 	br	10c6c <main+0x780>
		
	 	case victory 	:

			if(flags[5])
   10aac:	e0bfff43 	ldbu	r2,-3(fp)
   10ab0:	10803fcc 	andi	r2,r2,255
   10ab4:	10000d26 	beq	r2,zero,10aec <main+0x600>
			{
				clear_screen();
   10ab8:	001026c0 	call	1026c <clear_screen>
				flags[5]=0;
   10abc:	e03fff45 	stb	zero,-3(fp)
				flags[0]=1;
   10ac0:	00800044 	movi	r2,1
   10ac4:	e0bffe05 	stb	r2,-8(fp)
				flags[1]=1;
   10ac8:	00800044 	movi	r2,1
   10acc:	e0bffe45 	stb	r2,-7(fp)
				flags[2]=1;
   10ad0:	00800044 	movi	r2,1
   10ad4:	e0bffe85 	stb	r2,-6(fp)
				flags[3]=1;
   10ad8:	00800044 	movi	r2,1
   10adc:	e0bffec5 	stb	r2,-5(fp)
				flags[4]=1;
   10ae0:	00800044 	movi	r2,1
   10ae4:	e0bfff05 	stb	r2,-4(fp)
					draw_data[3] = victory_0[x*4+2]	;
					draw_data[4] = victory_0[x*4+3]	;
					alt_avalon_spi_command(SPI_0_BASE, 0, DRAW_SIZE, draw_data, 0, NULL, 0);
				}
			}
			break;
   10ae8:	00006006 	br	10c6c <main+0x780>
				flags[3]=1;
				flags[4]=1;
			}
			else
			{
				set_draw_colour(white);
   10aec:	d1200144 	addi	r4,gp,-32763
   10af0:	001035c0 	call	1035c <set_draw_colour>
				for ( x=0 ; x < VICTORY_SIZE/4 ; x++)
   10af4:	e03ffa15 	stw	zero,-24(fp)
   10af8:	00003906 	br	10be0 <main+0x6f4>
				{
					draw_data[1] = victory_0[x*4]	;
   10afc:	e0bffa17 	ldw	r2,-24(fp)
   10b00:	1085883a 	add	r2,r2,r2
   10b04:	1085883a 	add	r2,r2,r2
   10b08:	1007883a 	mov	r3,r2
   10b0c:	00800074 	movhi	r2,1
   10b10:	108d1cc4 	addi	r2,r2,13427
   10b14:	10c5883a 	add	r2,r2,r3
   10b18:	10c00003 	ldbu	r3,0(r2)
   10b1c:	00800074 	movhi	r2,1
   10b20:	108cbb04 	addi	r2,r2,13036
   10b24:	10c00045 	stb	r3,1(r2)
					draw_data[2] = victory_0[x*4+1]	;
   10b28:	e0bffa17 	ldw	r2,-24(fp)
   10b2c:	1085883a 	add	r2,r2,r2
   10b30:	1085883a 	add	r2,r2,r2
   10b34:	10c00044 	addi	r3,r2,1
   10b38:	00800074 	movhi	r2,1
   10b3c:	108d1cc4 	addi	r2,r2,13427
   10b40:	10c5883a 	add	r2,r2,r3
   10b44:	10c00003 	ldbu	r3,0(r2)
   10b48:	00800074 	movhi	r2,1
   10b4c:	108cbb04 	addi	r2,r2,13036
   10b50:	10c00085 	stb	r3,2(r2)
					draw_data[3] = victory_0[x*4+2]	;
   10b54:	e0bffa17 	ldw	r2,-24(fp)
   10b58:	1085883a 	add	r2,r2,r2
   10b5c:	1085883a 	add	r2,r2,r2
   10b60:	10c00084 	addi	r3,r2,2
   10b64:	00800074 	movhi	r2,1
   10b68:	108d1cc4 	addi	r2,r2,13427
   10b6c:	10c5883a 	add	r2,r2,r3
   10b70:	10c00003 	ldbu	r3,0(r2)
   10b74:	00800074 	movhi	r2,1
   10b78:	108cbb04 	addi	r2,r2,13036
   10b7c:	10c000c5 	stb	r3,3(r2)
					draw_data[4] = victory_0[x*4+3]	;
   10b80:	e0bffa17 	ldw	r2,-24(fp)
   10b84:	1085883a 	add	r2,r2,r2
   10b88:	1085883a 	add	r2,r2,r2
   10b8c:	10c000c4 	addi	r3,r2,3
   10b90:	00800074 	movhi	r2,1
   10b94:	108d1cc4 	addi	r2,r2,13427
   10b98:	10c5883a 	add	r2,r2,r3
   10b9c:	10c00003 	ldbu	r3,0(r2)
   10ba0:	00800074 	movhi	r2,1
   10ba4:	108cbb04 	addi	r2,r2,13036
   10ba8:	10c00105 	stb	r3,4(r2)
					alt_avalon_spi_command(SPI_0_BASE, 0, DRAW_SIZE, draw_data, 0, NULL, 0);
   10bac:	d8000215 	stw	zero,8(sp)
   10bb0:	d8000115 	stw	zero,4(sp)
   10bb4:	d8000015 	stw	zero,0(sp)
   10bb8:	01c00074 	movhi	r7,1
   10bbc:	39ccbb04 	addi	r7,r7,13036
   10bc0:	018002c4 	movi	r6,11
   10bc4:	000b883a 	mov	r5,zero
   10bc8:	010000b4 	movhi	r4,2
   10bcc:	21040004 	addi	r4,r4,4096
   10bd0:	0011a1c0 	call	11a1c <alt_avalon_spi_command>
				flags[4]=1;
			}
			else
			{
				set_draw_colour(white);
				for ( x=0 ; x < VICTORY_SIZE/4 ; x++)
   10bd4:	e0bffa17 	ldw	r2,-24(fp)
   10bd8:	10800044 	addi	r2,r2,1
   10bdc:	e0bffa15 	stw	r2,-24(fp)
   10be0:	e0bffa17 	ldw	r2,-24(fp)
   10be4:	10800dd0 	cmplti	r2,r2,55
   10be8:	103fc41e 	bne	r2,zero,10afc <_gp+0xffff3f08>
					draw_data[3] = victory_0[x*4+2]	;
					draw_data[4] = victory_0[x*4+3]	;
					alt_avalon_spi_command(SPI_0_BASE, 0, DRAW_SIZE, draw_data, 0, NULL, 0);
				}
			}
			break;
   10bec:	00001f06 	br	10c6c <main+0x780>

	 	default:
	 		draw_data[5]    = 0x00;
   10bf0:	00800074 	movhi	r2,1
   10bf4:	108cbb04 	addi	r2,r2,13036
   10bf8:	10000145 	stb	zero,5(r2)
	 		draw_data[6]    = 0x00;
   10bfc:	00800074 	movhi	r2,1
   10c00:	108cbb04 	addi	r2,r2,13036
   10c04:	10000185 	stb	zero,6(r2)
	 		draw_data[7]    = 0xff;
   10c08:	00800074 	movhi	r2,1
   10c0c:	108cbb04 	addi	r2,r2,13036
   10c10:	00ffffc4 	movi	r3,-1
   10c14:	10c001c5 	stb	r3,7(r2)
	 		draw_data[8]    = 0x00;
   10c18:	00800074 	movhi	r2,1
   10c1c:	108cbb04 	addi	r2,r2,13036
   10c20:	10000205 	stb	zero,8(r2)
	 		draw_data[9]    = 0x00;
   10c24:	00800074 	movhi	r2,1
   10c28:	108cbb04 	addi	r2,r2,13036
   10c2c:	10000245 	stb	zero,9(r2)
	 		draw_data[10]   = 0xff;
   10c30:	00800074 	movhi	r2,1
   10c34:	108cbb04 	addi	r2,r2,13036
   10c38:	00ffffc4 	movi	r3,-1
   10c3c:	10c00285 	stb	r3,10(r2)
	 		alt_avalon_spi_command(SPI_0_BASE, 0, DRAW_SIZE, draw_data, 0, NULL, 0);
   10c40:	d8000215 	stw	zero,8(sp)
   10c44:	d8000115 	stw	zero,4(sp)
   10c48:	d8000015 	stw	zero,0(sp)
   10c4c:	01c00074 	movhi	r7,1
   10c50:	39ccbb04 	addi	r7,r7,13036
   10c54:	018002c4 	movi	r6,11
   10c58:	000b883a 	mov	r5,zero
   10c5c:	010000b4 	movhi	r4,2
   10c60:	21040004 	addi	r4,r4,4096
   10c64:	0011a1c0 	call	11a1c <alt_avalon_spi_command>
	 		break;
   10c68:	0001883a 	nop
		};
	 	frame_delay();
   10c6c:	00104a40 	call	104a4 <frame_delay>
	 };
   10c70:	003e4506 	br	10588 <_gp+0xffff3994>

00010c74 <clock>:
   10c74:	00800074 	movhi	r2,1
   10c78:	10930804 	addi	r2,r2,19488
   10c7c:	11000017 	ldw	r4,0(r2)
   10c80:	defffb04 	addi	sp,sp,-20
   10c84:	d80b883a 	mov	r5,sp
   10c88:	dfc00415 	stw	ra,16(sp)
   10c8c:	0010cc00 	call	10cc0 <_times_r>
   10c90:	00ffffc4 	movi	r3,-1
   10c94:	10c00726 	beq	r2,r3,10cb4 <clock+0x40>
   10c98:	d8c00017 	ldw	r3,0(sp)
   10c9c:	d8800117 	ldw	r2,4(sp)
   10ca0:	1885883a 	add	r2,r3,r2
   10ca4:	d8c00217 	ldw	r3,8(sp)
   10ca8:	10c7883a 	add	r3,r2,r3
   10cac:	d8800317 	ldw	r2,12(sp)
   10cb0:	1885883a 	add	r2,r3,r2
   10cb4:	dfc00417 	ldw	ra,16(sp)
   10cb8:	dec00504 	addi	sp,sp,20
   10cbc:	f800283a 	ret

00010cc0 <_times_r>:
   10cc0:	2809883a 	mov	r4,r5
   10cc4:	0010e6c1 	jmpi	10e6c <times>

00010cc8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   10cc8:	defffc04 	addi	sp,sp,-16
   10ccc:	df000315 	stw	fp,12(sp)
   10cd0:	df000304 	addi	fp,sp,12
   10cd4:	e13ffd15 	stw	r4,-12(fp)
   10cd8:	e17ffe15 	stw	r5,-8(fp)
   10cdc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   10ce0:	e0fffe17 	ldw	r3,-8(fp)
   10ce4:	e0bffd17 	ldw	r2,-12(fp)
   10ce8:	18800c26 	beq	r3,r2,10d1c <alt_load_section+0x54>
  {
    while( to != end )
   10cec:	00000806 	br	10d10 <alt_load_section+0x48>
    {
      *to++ = *from++;
   10cf0:	e0bffe17 	ldw	r2,-8(fp)
   10cf4:	10c00104 	addi	r3,r2,4
   10cf8:	e0fffe15 	stw	r3,-8(fp)
   10cfc:	e0fffd17 	ldw	r3,-12(fp)
   10d00:	19000104 	addi	r4,r3,4
   10d04:	e13ffd15 	stw	r4,-12(fp)
   10d08:	18c00017 	ldw	r3,0(r3)
   10d0c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10d10:	e0fffe17 	ldw	r3,-8(fp)
   10d14:	e0bfff17 	ldw	r2,-4(fp)
   10d18:	18bff51e 	bne	r3,r2,10cf0 <_gp+0xffff40fc>
    {
      *to++ = *from++;
    }
  }
}
   10d1c:	0001883a 	nop
   10d20:	e037883a 	mov	sp,fp
   10d24:	df000017 	ldw	fp,0(sp)
   10d28:	dec00104 	addi	sp,sp,4
   10d2c:	f800283a 	ret

00010d30 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10d30:	defffe04 	addi	sp,sp,-8
   10d34:	dfc00115 	stw	ra,4(sp)
   10d38:	df000015 	stw	fp,0(sp)
   10d3c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10d40:	01800074 	movhi	r6,1
   10d44:	31931204 	addi	r6,r6,19528
   10d48:	01400074 	movhi	r5,1
   10d4c:	294cbb04 	addi	r5,r5,13036
   10d50:	01000074 	movhi	r4,1
   10d54:	21131204 	addi	r4,r4,19528
   10d58:	0010cc80 	call	10cc8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   10d5c:	01800074 	movhi	r6,1
   10d60:	31808c04 	addi	r6,r6,560
   10d64:	01400074 	movhi	r5,1
   10d68:	29400804 	addi	r5,r5,32
   10d6c:	01000074 	movhi	r4,1
   10d70:	21000804 	addi	r4,r4,32
   10d74:	0010cc80 	call	10cc8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   10d78:	01800074 	movhi	r6,1
   10d7c:	318cbb04 	addi	r6,r6,13036
   10d80:	01400074 	movhi	r5,1
   10d84:	294caf04 	addi	r5,r5,12988
   10d88:	01000074 	movhi	r4,1
   10d8c:	210caf04 	addi	r4,r4,12988
   10d90:	0010cc80 	call	10cc8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10d94:	0011f4c0 	call	11f4c <alt_dcache_flush_all>
  alt_icache_flush_all();
   10d98:	00121380 	call	12138 <alt_icache_flush_all>
}
   10d9c:	0001883a 	nop
   10da0:	e037883a 	mov	sp,fp
   10da4:	dfc00117 	ldw	ra,4(sp)
   10da8:	df000017 	ldw	fp,0(sp)
   10dac:	dec00204 	addi	sp,sp,8
   10db0:	f800283a 	ret

00010db4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10db4:	defffd04 	addi	sp,sp,-12
   10db8:	dfc00215 	stw	ra,8(sp)
   10dbc:	df000115 	stw	fp,4(sp)
   10dc0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10dc4:	0009883a 	mov	r4,zero
   10dc8:	0010f180 	call	10f18 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   10dcc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10dd0:	0010f500 	call	10f50 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   10dd4:	01800074 	movhi	r6,1
   10dd8:	318cb004 	addi	r6,r6,12992
   10ddc:	01400074 	movhi	r5,1
   10de0:	294cb004 	addi	r5,r5,12992
   10de4:	01000074 	movhi	r4,1
   10de8:	210cb004 	addi	r4,r4,12992
   10dec:	00124dc0 	call	124dc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   10df0:	00120780 	call	12078 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   10df4:	01000074 	movhi	r4,1
   10df8:	21083604 	addi	r4,r4,8408
   10dfc:	0012d200 	call	12d20 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   10e00:	d0a66c17 	ldw	r2,-26192(gp)
   10e04:	d0e66d17 	ldw	r3,-26188(gp)
   10e08:	d1266e17 	ldw	r4,-26184(gp)
   10e0c:	200d883a 	mov	r6,r4
   10e10:	180b883a 	mov	r5,r3
   10e14:	1009883a 	mov	r4,r2
   10e18:	00104ec0 	call	104ec <main>
   10e1c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   10e20:	01000044 	movi	r4,1
   10e24:	0011e740 	call	11e74 <close>
  exit (result);
   10e28:	e13fff17 	ldw	r4,-4(fp)
   10e2c:	0012d340 	call	12d34 <exit>

00010e30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10e30:	defffe04 	addi	sp,sp,-8
   10e34:	dfc00115 	stw	ra,4(sp)
   10e38:	df000015 	stw	fp,0(sp)
   10e3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10e40:	d0a01117 	ldw	r2,-32700(gp)
   10e44:	10000326 	beq	r2,zero,10e54 <alt_get_errno+0x24>
   10e48:	d0a01117 	ldw	r2,-32700(gp)
   10e4c:	103ee83a 	callr	r2
   10e50:	00000106 	br	10e58 <alt_get_errno+0x28>
   10e54:	d0a67304 	addi	r2,gp,-26164
}
   10e58:	e037883a 	mov	sp,fp
   10e5c:	dfc00117 	ldw	ra,4(sp)
   10e60:	df000017 	ldw	fp,0(sp)
   10e64:	dec00204 	addi	sp,sp,8
   10e68:	f800283a 	ret

00010e6c <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   10e6c:	defffc04 	addi	sp,sp,-16
   10e70:	dfc00315 	stw	ra,12(sp)
   10e74:	df000215 	stw	fp,8(sp)
   10e78:	df000204 	addi	fp,sp,8
   10e7c:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10e80:	d0a67117 	ldw	r2,-26172(gp)
  clock_t ticks = alt_nticks(); 
   10e84:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10e88:	d0a67017 	ldw	r2,-26176(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   10e8c:	1000061e 	bne	r2,zero,10ea8 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
   10e90:	0010e300 	call	10e30 <alt_get_errno>
   10e94:	1007883a 	mov	r3,r2
   10e98:	00801604 	movi	r2,88
   10e9c:	18800015 	stw	r2,0(r3)
    return 0;
   10ea0:	0005883a 	mov	r2,zero
   10ea4:	00000a06 	br	10ed0 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   10ea8:	e0bfff17 	ldw	r2,-4(fp)
   10eac:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   10eb0:	e0bfff17 	ldw	r2,-4(fp)
   10eb4:	e0fffe17 	ldw	r3,-8(fp)
   10eb8:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   10ebc:	e0bfff17 	ldw	r2,-4(fp)
   10ec0:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   10ec4:	e0bfff17 	ldw	r2,-4(fp)
   10ec8:	10000315 	stw	zero,12(r2)

  return ticks;
   10ecc:	e0bffe17 	ldw	r2,-8(fp)
}
   10ed0:	e037883a 	mov	sp,fp
   10ed4:	dfc00117 	ldw	ra,4(sp)
   10ed8:	df000017 	ldw	fp,0(sp)
   10edc:	dec00204 	addi	sp,sp,8
   10ee0:	f800283a 	ret

00010ee4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   10ee4:	defffd04 	addi	sp,sp,-12
   10ee8:	dfc00215 	stw	ra,8(sp)
   10eec:	df000115 	stw	fp,4(sp)
   10ef0:	df000104 	addi	fp,sp,4
   10ef4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10ef8:	d1600e04 	addi	r5,gp,-32712
   10efc:	e13fff17 	ldw	r4,-4(fp)
   10f00:	0011fd40 	call	11fd4 <alt_dev_llist_insert>
}
   10f04:	e037883a 	mov	sp,fp
   10f08:	dfc00117 	ldw	ra,4(sp)
   10f0c:	df000017 	ldw	fp,0(sp)
   10f10:	dec00204 	addi	sp,sp,8
   10f14:	f800283a 	ret

00010f18 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10f18:	defffd04 	addi	sp,sp,-12
   10f1c:	dfc00215 	stw	ra,8(sp)
   10f20:	df000115 	stw	fp,4(sp)
   10f24:	df000104 	addi	fp,sp,4
   10f28:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( PROCESSOR, processor);
   10f2c:	0012a040 	call	12a04 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10f30:	00800044 	movi	r2,1
   10f34:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10f38:	0001883a 	nop
   10f3c:	e037883a 	mov	sp,fp
   10f40:	dfc00117 	ldw	ra,4(sp)
   10f44:	df000017 	ldw	fp,0(sp)
   10f48:	dec00204 	addi	sp,sp,8
   10f4c:	f800283a 	ret

00010f50 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10f50:	defffe04 	addi	sp,sp,-8
   10f54:	dfc00115 	stw	ra,4(sp)
   10f58:	df000015 	stw	fp,0(sp)
   10f5c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   10f60:	01c0fa04 	movi	r7,1000
   10f64:	000d883a 	mov	r6,zero
   10f68:	000b883a 	mov	r5,zero
   10f6c:	010000b4 	movhi	r4,2
   10f70:	21040804 	addi	r4,r4,4128
   10f74:	0011c900 	call	11c90 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   10f78:	01800044 	movi	r6,1
   10f7c:	000b883a 	mov	r5,zero
   10f80:	01000074 	movhi	r4,1
   10f84:	210e8504 	addi	r4,r4,14868
   10f88:	00111180 	call	11118 <altera_avalon_jtag_uart_init>
   10f8c:	01000074 	movhi	r4,1
   10f90:	210e7b04 	addi	r4,r4,14828
   10f94:	0010ee40 	call	10ee4 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
   10f98:	0001883a 	nop
}
   10f9c:	0001883a 	nop
   10fa0:	e037883a 	mov	sp,fp
   10fa4:	dfc00117 	ldw	ra,4(sp)
   10fa8:	df000017 	ldw	fp,0(sp)
   10fac:	dec00204 	addi	sp,sp,8
   10fb0:	f800283a 	ret

00010fb4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   10fb4:	defffa04 	addi	sp,sp,-24
   10fb8:	dfc00515 	stw	ra,20(sp)
   10fbc:	df000415 	stw	fp,16(sp)
   10fc0:	df000404 	addi	fp,sp,16
   10fc4:	e13ffd15 	stw	r4,-12(fp)
   10fc8:	e17ffe15 	stw	r5,-8(fp)
   10fcc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10fd0:	e0bffd17 	ldw	r2,-12(fp)
   10fd4:	10800017 	ldw	r2,0(r2)
   10fd8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   10fdc:	e0bffc17 	ldw	r2,-16(fp)
   10fe0:	10c00a04 	addi	r3,r2,40
   10fe4:	e0bffd17 	ldw	r2,-12(fp)
   10fe8:	10800217 	ldw	r2,8(r2)
   10fec:	100f883a 	mov	r7,r2
   10ff0:	e1bfff17 	ldw	r6,-4(fp)
   10ff4:	e17ffe17 	ldw	r5,-8(fp)
   10ff8:	1809883a 	mov	r4,r3
   10ffc:	00115dc0 	call	115dc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   11000:	e037883a 	mov	sp,fp
   11004:	dfc00117 	ldw	ra,4(sp)
   11008:	df000017 	ldw	fp,0(sp)
   1100c:	dec00204 	addi	sp,sp,8
   11010:	f800283a 	ret

00011014 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   11014:	defffa04 	addi	sp,sp,-24
   11018:	dfc00515 	stw	ra,20(sp)
   1101c:	df000415 	stw	fp,16(sp)
   11020:	df000404 	addi	fp,sp,16
   11024:	e13ffd15 	stw	r4,-12(fp)
   11028:	e17ffe15 	stw	r5,-8(fp)
   1102c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   11030:	e0bffd17 	ldw	r2,-12(fp)
   11034:	10800017 	ldw	r2,0(r2)
   11038:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1103c:	e0bffc17 	ldw	r2,-16(fp)
   11040:	10c00a04 	addi	r3,r2,40
   11044:	e0bffd17 	ldw	r2,-12(fp)
   11048:	10800217 	ldw	r2,8(r2)
   1104c:	100f883a 	mov	r7,r2
   11050:	e1bfff17 	ldw	r6,-4(fp)
   11054:	e17ffe17 	ldw	r5,-8(fp)
   11058:	1809883a 	mov	r4,r3
   1105c:	00117f80 	call	117f8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   11060:	e037883a 	mov	sp,fp
   11064:	dfc00117 	ldw	ra,4(sp)
   11068:	df000017 	ldw	fp,0(sp)
   1106c:	dec00204 	addi	sp,sp,8
   11070:	f800283a 	ret

00011074 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   11074:	defffc04 	addi	sp,sp,-16
   11078:	dfc00315 	stw	ra,12(sp)
   1107c:	df000215 	stw	fp,8(sp)
   11080:	df000204 	addi	fp,sp,8
   11084:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   11088:	e0bfff17 	ldw	r2,-4(fp)
   1108c:	10800017 	ldw	r2,0(r2)
   11090:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   11094:	e0bffe17 	ldw	r2,-8(fp)
   11098:	10c00a04 	addi	r3,r2,40
   1109c:	e0bfff17 	ldw	r2,-4(fp)
   110a0:	10800217 	ldw	r2,8(r2)
   110a4:	100b883a 	mov	r5,r2
   110a8:	1809883a 	mov	r4,r3
   110ac:	00114840 	call	11484 <altera_avalon_jtag_uart_close>
}
   110b0:	e037883a 	mov	sp,fp
   110b4:	dfc00117 	ldw	ra,4(sp)
   110b8:	df000017 	ldw	fp,0(sp)
   110bc:	dec00204 	addi	sp,sp,8
   110c0:	f800283a 	ret

000110c4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   110c4:	defffa04 	addi	sp,sp,-24
   110c8:	dfc00515 	stw	ra,20(sp)
   110cc:	df000415 	stw	fp,16(sp)
   110d0:	df000404 	addi	fp,sp,16
   110d4:	e13ffd15 	stw	r4,-12(fp)
   110d8:	e17ffe15 	stw	r5,-8(fp)
   110dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   110e0:	e0bffd17 	ldw	r2,-12(fp)
   110e4:	10800017 	ldw	r2,0(r2)
   110e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   110ec:	e0bffc17 	ldw	r2,-16(fp)
   110f0:	10800a04 	addi	r2,r2,40
   110f4:	e1bfff17 	ldw	r6,-4(fp)
   110f8:	e17ffe17 	ldw	r5,-8(fp)
   110fc:	1009883a 	mov	r4,r2
   11100:	00114ec0 	call	114ec <altera_avalon_jtag_uart_ioctl>
}
   11104:	e037883a 	mov	sp,fp
   11108:	dfc00117 	ldw	ra,4(sp)
   1110c:	df000017 	ldw	fp,0(sp)
   11110:	dec00204 	addi	sp,sp,8
   11114:	f800283a 	ret

00011118 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   11118:	defffa04 	addi	sp,sp,-24
   1111c:	dfc00515 	stw	ra,20(sp)
   11120:	df000415 	stw	fp,16(sp)
   11124:	df000404 	addi	fp,sp,16
   11128:	e13ffd15 	stw	r4,-12(fp)
   1112c:	e17ffe15 	stw	r5,-8(fp)
   11130:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   11134:	e0bffd17 	ldw	r2,-12(fp)
   11138:	00c00044 	movi	r3,1
   1113c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   11140:	e0bffd17 	ldw	r2,-12(fp)
   11144:	10800017 	ldw	r2,0(r2)
   11148:	10800104 	addi	r2,r2,4
   1114c:	1007883a 	mov	r3,r2
   11150:	e0bffd17 	ldw	r2,-12(fp)
   11154:	10800817 	ldw	r2,32(r2)
   11158:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   1115c:	e0bffe17 	ldw	r2,-8(fp)
   11160:	e0ffff17 	ldw	r3,-4(fp)
   11164:	d8000015 	stw	zero,0(sp)
   11168:	e1fffd17 	ldw	r7,-12(fp)
   1116c:	01800074 	movhi	r6,1
   11170:	31847604 	addi	r6,r6,4568
   11174:	180b883a 	mov	r5,r3
   11178:	1009883a 	mov	r4,r2
   1117c:	00121580 	call	12158 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   11180:	e0bffd17 	ldw	r2,-12(fp)
   11184:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   11188:	e0bffd17 	ldw	r2,-12(fp)
   1118c:	10800204 	addi	r2,r2,8
   11190:	d0e67017 	ldw	r3,-26176(gp)
   11194:	e1fffd17 	ldw	r7,-12(fp)
   11198:	01800074 	movhi	r6,1
   1119c:	3184f904 	addi	r6,r6,5092
   111a0:	180b883a 	mov	r5,r3
   111a4:	1009883a 	mov	r4,r2
   111a8:	0011d0c0 	call	11d0c <alt_alarm_start>
   111ac:	1000040e 	bge	r2,zero,111c0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   111b0:	e0fffd17 	ldw	r3,-12(fp)
   111b4:	00a00034 	movhi	r2,32768
   111b8:	10bfffc4 	addi	r2,r2,-1
   111bc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   111c0:	0001883a 	nop
   111c4:	e037883a 	mov	sp,fp
   111c8:	dfc00117 	ldw	ra,4(sp)
   111cc:	df000017 	ldw	fp,0(sp)
   111d0:	dec00204 	addi	sp,sp,8
   111d4:	f800283a 	ret

000111d8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   111d8:	defff804 	addi	sp,sp,-32
   111dc:	df000715 	stw	fp,28(sp)
   111e0:	df000704 	addi	fp,sp,28
   111e4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   111e8:	e0bfff17 	ldw	r2,-4(fp)
   111ec:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   111f0:	e0bffb17 	ldw	r2,-20(fp)
   111f4:	10800017 	ldw	r2,0(r2)
   111f8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   111fc:	e0bffc17 	ldw	r2,-16(fp)
   11200:	10800104 	addi	r2,r2,4
   11204:	10800037 	ldwio	r2,0(r2)
   11208:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1120c:	e0bffd17 	ldw	r2,-12(fp)
   11210:	1080c00c 	andi	r2,r2,768
   11214:	10006d26 	beq	r2,zero,113cc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   11218:	e0bffd17 	ldw	r2,-12(fp)
   1121c:	1080400c 	andi	r2,r2,256
   11220:	10003526 	beq	r2,zero,112f8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   11224:	00800074 	movhi	r2,1
   11228:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1122c:	e0bffb17 	ldw	r2,-20(fp)
   11230:	10800a17 	ldw	r2,40(r2)
   11234:	10800044 	addi	r2,r2,1
   11238:	1081ffcc 	andi	r2,r2,2047
   1123c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   11240:	e0bffb17 	ldw	r2,-20(fp)
   11244:	10c00b17 	ldw	r3,44(r2)
   11248:	e0bffe17 	ldw	r2,-8(fp)
   1124c:	18801526 	beq	r3,r2,112a4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   11250:	e0bffc17 	ldw	r2,-16(fp)
   11254:	10800037 	ldwio	r2,0(r2)
   11258:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1125c:	e0bff917 	ldw	r2,-28(fp)
   11260:	10a0000c 	andi	r2,r2,32768
   11264:	10001126 	beq	r2,zero,112ac <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   11268:	e0bffb17 	ldw	r2,-20(fp)
   1126c:	10800a17 	ldw	r2,40(r2)
   11270:	e0fff917 	ldw	r3,-28(fp)
   11274:	1809883a 	mov	r4,r3
   11278:	e0fffb17 	ldw	r3,-20(fp)
   1127c:	1885883a 	add	r2,r3,r2
   11280:	10800e04 	addi	r2,r2,56
   11284:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11288:	e0bffb17 	ldw	r2,-20(fp)
   1128c:	10800a17 	ldw	r2,40(r2)
   11290:	10800044 	addi	r2,r2,1
   11294:	10c1ffcc 	andi	r3,r2,2047
   11298:	e0bffb17 	ldw	r2,-20(fp)
   1129c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   112a0:	003fe206 	br	1122c <_gp+0xffff4638>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   112a4:	0001883a 	nop
   112a8:	00000106 	br	112b0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   112ac:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   112b0:	e0bff917 	ldw	r2,-28(fp)
   112b4:	10bfffec 	andhi	r2,r2,65535
   112b8:	10000f26 	beq	r2,zero,112f8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   112bc:	e0bffb17 	ldw	r2,-20(fp)
   112c0:	10c00817 	ldw	r3,32(r2)
   112c4:	00bfff84 	movi	r2,-2
   112c8:	1886703a 	and	r3,r3,r2
   112cc:	e0bffb17 	ldw	r2,-20(fp)
   112d0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   112d4:	e0bffc17 	ldw	r2,-16(fp)
   112d8:	10800104 	addi	r2,r2,4
   112dc:	1007883a 	mov	r3,r2
   112e0:	e0bffb17 	ldw	r2,-20(fp)
   112e4:	10800817 	ldw	r2,32(r2)
   112e8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   112ec:	e0bffc17 	ldw	r2,-16(fp)
   112f0:	10800104 	addi	r2,r2,4
   112f4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   112f8:	e0bffd17 	ldw	r2,-12(fp)
   112fc:	1080800c 	andi	r2,r2,512
   11300:	103fbe26 	beq	r2,zero,111fc <_gp+0xffff4608>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   11304:	e0bffd17 	ldw	r2,-12(fp)
   11308:	1004d43a 	srli	r2,r2,16
   1130c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   11310:	00001406 	br	11364 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   11314:	e0bffc17 	ldw	r2,-16(fp)
   11318:	e0fffb17 	ldw	r3,-20(fp)
   1131c:	18c00d17 	ldw	r3,52(r3)
   11320:	e13ffb17 	ldw	r4,-20(fp)
   11324:	20c7883a 	add	r3,r4,r3
   11328:	18c20e04 	addi	r3,r3,2104
   1132c:	18c00003 	ldbu	r3,0(r3)
   11330:	18c03fcc 	andi	r3,r3,255
   11334:	18c0201c 	xori	r3,r3,128
   11338:	18ffe004 	addi	r3,r3,-128
   1133c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11340:	e0bffb17 	ldw	r2,-20(fp)
   11344:	10800d17 	ldw	r2,52(r2)
   11348:	10800044 	addi	r2,r2,1
   1134c:	10c1ffcc 	andi	r3,r2,2047
   11350:	e0bffb17 	ldw	r2,-20(fp)
   11354:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   11358:	e0bffa17 	ldw	r2,-24(fp)
   1135c:	10bfffc4 	addi	r2,r2,-1
   11360:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   11364:	e0bffa17 	ldw	r2,-24(fp)
   11368:	10000526 	beq	r2,zero,11380 <altera_avalon_jtag_uart_irq+0x1a8>
   1136c:	e0bffb17 	ldw	r2,-20(fp)
   11370:	10c00d17 	ldw	r3,52(r2)
   11374:	e0bffb17 	ldw	r2,-20(fp)
   11378:	10800c17 	ldw	r2,48(r2)
   1137c:	18bfe51e 	bne	r3,r2,11314 <_gp+0xffff4720>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   11380:	e0bffa17 	ldw	r2,-24(fp)
   11384:	103f9d26 	beq	r2,zero,111fc <_gp+0xffff4608>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   11388:	e0bffb17 	ldw	r2,-20(fp)
   1138c:	10c00817 	ldw	r3,32(r2)
   11390:	00bfff44 	movi	r2,-3
   11394:	1886703a 	and	r3,r3,r2
   11398:	e0bffb17 	ldw	r2,-20(fp)
   1139c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   113a0:	e0bffb17 	ldw	r2,-20(fp)
   113a4:	10800017 	ldw	r2,0(r2)
   113a8:	10800104 	addi	r2,r2,4
   113ac:	1007883a 	mov	r3,r2
   113b0:	e0bffb17 	ldw	r2,-20(fp)
   113b4:	10800817 	ldw	r2,32(r2)
   113b8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   113bc:	e0bffc17 	ldw	r2,-16(fp)
   113c0:	10800104 	addi	r2,r2,4
   113c4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   113c8:	003f8c06 	br	111fc <_gp+0xffff4608>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   113cc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   113d0:	0001883a 	nop
   113d4:	e037883a 	mov	sp,fp
   113d8:	df000017 	ldw	fp,0(sp)
   113dc:	dec00104 	addi	sp,sp,4
   113e0:	f800283a 	ret

000113e4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   113e4:	defff804 	addi	sp,sp,-32
   113e8:	df000715 	stw	fp,28(sp)
   113ec:	df000704 	addi	fp,sp,28
   113f0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   113f4:	e0bffb17 	ldw	r2,-20(fp)
   113f8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   113fc:	e0bff917 	ldw	r2,-28(fp)
   11400:	10800017 	ldw	r2,0(r2)
   11404:	10800104 	addi	r2,r2,4
   11408:	10800037 	ldwio	r2,0(r2)
   1140c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   11410:	e0bffa17 	ldw	r2,-24(fp)
   11414:	1081000c 	andi	r2,r2,1024
   11418:	10000b26 	beq	r2,zero,11448 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1141c:	e0bff917 	ldw	r2,-28(fp)
   11420:	10800017 	ldw	r2,0(r2)
   11424:	10800104 	addi	r2,r2,4
   11428:	1007883a 	mov	r3,r2
   1142c:	e0bff917 	ldw	r2,-28(fp)
   11430:	10800817 	ldw	r2,32(r2)
   11434:	10810014 	ori	r2,r2,1024
   11438:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1143c:	e0bff917 	ldw	r2,-28(fp)
   11440:	10000915 	stw	zero,36(r2)
   11444:	00000a06 	br	11470 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   11448:	e0bff917 	ldw	r2,-28(fp)
   1144c:	10c00917 	ldw	r3,36(r2)
   11450:	00a00034 	movhi	r2,32768
   11454:	10bfff04 	addi	r2,r2,-4
   11458:	10c00536 	bltu	r2,r3,11470 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   1145c:	e0bff917 	ldw	r2,-28(fp)
   11460:	10800917 	ldw	r2,36(r2)
   11464:	10c00044 	addi	r3,r2,1
   11468:	e0bff917 	ldw	r2,-28(fp)
   1146c:	10c00915 	stw	r3,36(r2)
   11470:	d0a67017 	ldw	r2,-26176(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   11474:	e037883a 	mov	sp,fp
   11478:	df000017 	ldw	fp,0(sp)
   1147c:	dec00104 	addi	sp,sp,4
   11480:	f800283a 	ret

00011484 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   11484:	defffd04 	addi	sp,sp,-12
   11488:	df000215 	stw	fp,8(sp)
   1148c:	df000204 	addi	fp,sp,8
   11490:	e13ffe15 	stw	r4,-8(fp)
   11494:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   11498:	00000506 	br	114b0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1149c:	e0bfff17 	ldw	r2,-4(fp)
   114a0:	1090000c 	andi	r2,r2,16384
   114a4:	10000226 	beq	r2,zero,114b0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   114a8:	00bffd44 	movi	r2,-11
   114ac:	00000b06 	br	114dc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   114b0:	e0bffe17 	ldw	r2,-8(fp)
   114b4:	10c00d17 	ldw	r3,52(r2)
   114b8:	e0bffe17 	ldw	r2,-8(fp)
   114bc:	10800c17 	ldw	r2,48(r2)
   114c0:	18800526 	beq	r3,r2,114d8 <altera_avalon_jtag_uart_close+0x54>
   114c4:	e0bffe17 	ldw	r2,-8(fp)
   114c8:	10c00917 	ldw	r3,36(r2)
   114cc:	e0bffe17 	ldw	r2,-8(fp)
   114d0:	10800117 	ldw	r2,4(r2)
   114d4:	18bff136 	bltu	r3,r2,1149c <_gp+0xffff48a8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   114d8:	0005883a 	mov	r2,zero
}
   114dc:	e037883a 	mov	sp,fp
   114e0:	df000017 	ldw	fp,0(sp)
   114e4:	dec00104 	addi	sp,sp,4
   114e8:	f800283a 	ret

000114ec <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   114ec:	defffa04 	addi	sp,sp,-24
   114f0:	df000515 	stw	fp,20(sp)
   114f4:	df000504 	addi	fp,sp,20
   114f8:	e13ffd15 	stw	r4,-12(fp)
   114fc:	e17ffe15 	stw	r5,-8(fp)
   11500:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   11504:	00bff9c4 	movi	r2,-25
   11508:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1150c:	e0bffe17 	ldw	r2,-8(fp)
   11510:	10da8060 	cmpeqi	r3,r2,27137
   11514:	1800031e 	bne	r3,zero,11524 <altera_avalon_jtag_uart_ioctl+0x38>
   11518:	109a80a0 	cmpeqi	r2,r2,27138
   1151c:	1000181e 	bne	r2,zero,11580 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   11520:	00002906 	br	115c8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   11524:	e0bffd17 	ldw	r2,-12(fp)
   11528:	10c00117 	ldw	r3,4(r2)
   1152c:	00a00034 	movhi	r2,32768
   11530:	10bfffc4 	addi	r2,r2,-1
   11534:	18802126 	beq	r3,r2,115bc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   11538:	e0bfff17 	ldw	r2,-4(fp)
   1153c:	10800017 	ldw	r2,0(r2)
   11540:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   11544:	e0bffc17 	ldw	r2,-16(fp)
   11548:	10800090 	cmplti	r2,r2,2
   1154c:	1000061e 	bne	r2,zero,11568 <altera_avalon_jtag_uart_ioctl+0x7c>
   11550:	e0fffc17 	ldw	r3,-16(fp)
   11554:	00a00034 	movhi	r2,32768
   11558:	10bfffc4 	addi	r2,r2,-1
   1155c:	18800226 	beq	r3,r2,11568 <altera_avalon_jtag_uart_ioctl+0x7c>
   11560:	e0bffc17 	ldw	r2,-16(fp)
   11564:	00000206 	br	11570 <altera_avalon_jtag_uart_ioctl+0x84>
   11568:	00a00034 	movhi	r2,32768
   1156c:	10bfff84 	addi	r2,r2,-2
   11570:	e0fffd17 	ldw	r3,-12(fp)
   11574:	18800115 	stw	r2,4(r3)
      rc = 0;
   11578:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1157c:	00000f06 	br	115bc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   11580:	e0bffd17 	ldw	r2,-12(fp)
   11584:	10c00117 	ldw	r3,4(r2)
   11588:	00a00034 	movhi	r2,32768
   1158c:	10bfffc4 	addi	r2,r2,-1
   11590:	18800c26 	beq	r3,r2,115c4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   11594:	e0bffd17 	ldw	r2,-12(fp)
   11598:	10c00917 	ldw	r3,36(r2)
   1159c:	e0bffd17 	ldw	r2,-12(fp)
   115a0:	10800117 	ldw	r2,4(r2)
   115a4:	1885803a 	cmpltu	r2,r3,r2
   115a8:	10c03fcc 	andi	r3,r2,255
   115ac:	e0bfff17 	ldw	r2,-4(fp)
   115b0:	10c00015 	stw	r3,0(r2)
      rc = 0;
   115b4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   115b8:	00000206 	br	115c4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   115bc:	0001883a 	nop
   115c0:	00000106 	br	115c8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   115c4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   115c8:	e0bffb17 	ldw	r2,-20(fp)
}
   115cc:	e037883a 	mov	sp,fp
   115d0:	df000017 	ldw	fp,0(sp)
   115d4:	dec00104 	addi	sp,sp,4
   115d8:	f800283a 	ret

000115dc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   115dc:	defff304 	addi	sp,sp,-52
   115e0:	dfc00c15 	stw	ra,48(sp)
   115e4:	df000b15 	stw	fp,44(sp)
   115e8:	df000b04 	addi	fp,sp,44
   115ec:	e13ffc15 	stw	r4,-16(fp)
   115f0:	e17ffd15 	stw	r5,-12(fp)
   115f4:	e1bffe15 	stw	r6,-8(fp)
   115f8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   115fc:	e0bffd17 	ldw	r2,-12(fp)
   11600:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   11604:	00004706 	br	11724 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   11608:	e0bffc17 	ldw	r2,-16(fp)
   1160c:	10800a17 	ldw	r2,40(r2)
   11610:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   11614:	e0bffc17 	ldw	r2,-16(fp)
   11618:	10800b17 	ldw	r2,44(r2)
   1161c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   11620:	e0fff717 	ldw	r3,-36(fp)
   11624:	e0bff817 	ldw	r2,-32(fp)
   11628:	18800536 	bltu	r3,r2,11640 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   1162c:	e0fff717 	ldw	r3,-36(fp)
   11630:	e0bff817 	ldw	r2,-32(fp)
   11634:	1885c83a 	sub	r2,r3,r2
   11638:	e0bff615 	stw	r2,-40(fp)
   1163c:	00000406 	br	11650 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   11640:	00c20004 	movi	r3,2048
   11644:	e0bff817 	ldw	r2,-32(fp)
   11648:	1885c83a 	sub	r2,r3,r2
   1164c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   11650:	e0bff617 	ldw	r2,-40(fp)
   11654:	10001e26 	beq	r2,zero,116d0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   11658:	e0fffe17 	ldw	r3,-8(fp)
   1165c:	e0bff617 	ldw	r2,-40(fp)
   11660:	1880022e 	bgeu	r3,r2,1166c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   11664:	e0bffe17 	ldw	r2,-8(fp)
   11668:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1166c:	e0bffc17 	ldw	r2,-16(fp)
   11670:	10c00e04 	addi	r3,r2,56
   11674:	e0bff817 	ldw	r2,-32(fp)
   11678:	1885883a 	add	r2,r3,r2
   1167c:	e1bff617 	ldw	r6,-40(fp)
   11680:	100b883a 	mov	r5,r2
   11684:	e13ff517 	ldw	r4,-44(fp)
   11688:	0012de80 	call	12de8 <memcpy>
      ptr   += n;
   1168c:	e0fff517 	ldw	r3,-44(fp)
   11690:	e0bff617 	ldw	r2,-40(fp)
   11694:	1885883a 	add	r2,r3,r2
   11698:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   1169c:	e0fffe17 	ldw	r3,-8(fp)
   116a0:	e0bff617 	ldw	r2,-40(fp)
   116a4:	1885c83a 	sub	r2,r3,r2
   116a8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   116ac:	e0fff817 	ldw	r3,-32(fp)
   116b0:	e0bff617 	ldw	r2,-40(fp)
   116b4:	1885883a 	add	r2,r3,r2
   116b8:	10c1ffcc 	andi	r3,r2,2047
   116bc:	e0bffc17 	ldw	r2,-16(fp)
   116c0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   116c4:	e0bffe17 	ldw	r2,-8(fp)
   116c8:	00bfcf16 	blt	zero,r2,11608 <_gp+0xffff4a14>
   116cc:	00000106 	br	116d4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   116d0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   116d4:	e0fff517 	ldw	r3,-44(fp)
   116d8:	e0bffd17 	ldw	r2,-12(fp)
   116dc:	1880141e 	bne	r3,r2,11730 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   116e0:	e0bfff17 	ldw	r2,-4(fp)
   116e4:	1090000c 	andi	r2,r2,16384
   116e8:	1000131e 	bne	r2,zero,11738 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   116ec:	0001883a 	nop
   116f0:	e0bffc17 	ldw	r2,-16(fp)
   116f4:	10c00a17 	ldw	r3,40(r2)
   116f8:	e0bff717 	ldw	r2,-36(fp)
   116fc:	1880051e 	bne	r3,r2,11714 <altera_avalon_jtag_uart_read+0x138>
   11700:	e0bffc17 	ldw	r2,-16(fp)
   11704:	10c00917 	ldw	r3,36(r2)
   11708:	e0bffc17 	ldw	r2,-16(fp)
   1170c:	10800117 	ldw	r2,4(r2)
   11710:	18bff736 	bltu	r3,r2,116f0 <_gp+0xffff4afc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   11714:	e0bffc17 	ldw	r2,-16(fp)
   11718:	10c00a17 	ldw	r3,40(r2)
   1171c:	e0bff717 	ldw	r2,-36(fp)
   11720:	18800726 	beq	r3,r2,11740 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   11724:	e0bffe17 	ldw	r2,-8(fp)
   11728:	00bfb716 	blt	zero,r2,11608 <_gp+0xffff4a14>
   1172c:	00000506 	br	11744 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   11730:	0001883a 	nop
   11734:	00000306 	br	11744 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   11738:	0001883a 	nop
   1173c:	00000106 	br	11744 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   11740:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   11744:	e0fff517 	ldw	r3,-44(fp)
   11748:	e0bffd17 	ldw	r2,-12(fp)
   1174c:	18801826 	beq	r3,r2,117b0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11750:	0005303a 	rdctl	r2,status
   11754:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11758:	e0fffb17 	ldw	r3,-20(fp)
   1175c:	00bfff84 	movi	r2,-2
   11760:	1884703a 	and	r2,r3,r2
   11764:	1001703a 	wrctl	status,r2
  
  return context;
   11768:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1176c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   11770:	e0bffc17 	ldw	r2,-16(fp)
   11774:	10800817 	ldw	r2,32(r2)
   11778:	10c00054 	ori	r3,r2,1
   1177c:	e0bffc17 	ldw	r2,-16(fp)
   11780:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11784:	e0bffc17 	ldw	r2,-16(fp)
   11788:	10800017 	ldw	r2,0(r2)
   1178c:	10800104 	addi	r2,r2,4
   11790:	1007883a 	mov	r3,r2
   11794:	e0bffc17 	ldw	r2,-16(fp)
   11798:	10800817 	ldw	r2,32(r2)
   1179c:	18800035 	stwio	r2,0(r3)
   117a0:	e0bffa17 	ldw	r2,-24(fp)
   117a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   117a8:	e0bff917 	ldw	r2,-28(fp)
   117ac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   117b0:	e0fff517 	ldw	r3,-44(fp)
   117b4:	e0bffd17 	ldw	r2,-12(fp)
   117b8:	18800426 	beq	r3,r2,117cc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   117bc:	e0fff517 	ldw	r3,-44(fp)
   117c0:	e0bffd17 	ldw	r2,-12(fp)
   117c4:	1885c83a 	sub	r2,r3,r2
   117c8:	00000606 	br	117e4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   117cc:	e0bfff17 	ldw	r2,-4(fp)
   117d0:	1090000c 	andi	r2,r2,16384
   117d4:	10000226 	beq	r2,zero,117e0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   117d8:	00bffd44 	movi	r2,-11
   117dc:	00000106 	br	117e4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   117e0:	00bffec4 	movi	r2,-5
}
   117e4:	e037883a 	mov	sp,fp
   117e8:	dfc00117 	ldw	ra,4(sp)
   117ec:	df000017 	ldw	fp,0(sp)
   117f0:	dec00204 	addi	sp,sp,8
   117f4:	f800283a 	ret

000117f8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   117f8:	defff304 	addi	sp,sp,-52
   117fc:	dfc00c15 	stw	ra,48(sp)
   11800:	df000b15 	stw	fp,44(sp)
   11804:	df000b04 	addi	fp,sp,44
   11808:	e13ffc15 	stw	r4,-16(fp)
   1180c:	e17ffd15 	stw	r5,-12(fp)
   11810:	e1bffe15 	stw	r6,-8(fp)
   11814:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   11818:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1181c:	e0bffd17 	ldw	r2,-12(fp)
   11820:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   11824:	00003706 	br	11904 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   11828:	e0bffc17 	ldw	r2,-16(fp)
   1182c:	10800c17 	ldw	r2,48(r2)
   11830:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   11834:	e0bffc17 	ldw	r2,-16(fp)
   11838:	10800d17 	ldw	r2,52(r2)
   1183c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   11840:	e0fff917 	ldw	r3,-28(fp)
   11844:	e0bff517 	ldw	r2,-44(fp)
   11848:	1880062e 	bgeu	r3,r2,11864 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1184c:	e0fff517 	ldw	r3,-44(fp)
   11850:	e0bff917 	ldw	r2,-28(fp)
   11854:	1885c83a 	sub	r2,r3,r2
   11858:	10bfffc4 	addi	r2,r2,-1
   1185c:	e0bff615 	stw	r2,-40(fp)
   11860:	00000b06 	br	11890 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   11864:	e0bff517 	ldw	r2,-44(fp)
   11868:	10000526 	beq	r2,zero,11880 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1186c:	00c20004 	movi	r3,2048
   11870:	e0bff917 	ldw	r2,-28(fp)
   11874:	1885c83a 	sub	r2,r3,r2
   11878:	e0bff615 	stw	r2,-40(fp)
   1187c:	00000406 	br	11890 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   11880:	00c1ffc4 	movi	r3,2047
   11884:	e0bff917 	ldw	r2,-28(fp)
   11888:	1885c83a 	sub	r2,r3,r2
   1188c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   11890:	e0bff617 	ldw	r2,-40(fp)
   11894:	10001e26 	beq	r2,zero,11910 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   11898:	e0fffe17 	ldw	r3,-8(fp)
   1189c:	e0bff617 	ldw	r2,-40(fp)
   118a0:	1880022e 	bgeu	r3,r2,118ac <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   118a4:	e0bffe17 	ldw	r2,-8(fp)
   118a8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   118ac:	e0bffc17 	ldw	r2,-16(fp)
   118b0:	10c20e04 	addi	r3,r2,2104
   118b4:	e0bff917 	ldw	r2,-28(fp)
   118b8:	1885883a 	add	r2,r3,r2
   118bc:	e1bff617 	ldw	r6,-40(fp)
   118c0:	e17ffd17 	ldw	r5,-12(fp)
   118c4:	1009883a 	mov	r4,r2
   118c8:	0012de80 	call	12de8 <memcpy>
      ptr   += n;
   118cc:	e0fffd17 	ldw	r3,-12(fp)
   118d0:	e0bff617 	ldw	r2,-40(fp)
   118d4:	1885883a 	add	r2,r3,r2
   118d8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   118dc:	e0fffe17 	ldw	r3,-8(fp)
   118e0:	e0bff617 	ldw	r2,-40(fp)
   118e4:	1885c83a 	sub	r2,r3,r2
   118e8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   118ec:	e0fff917 	ldw	r3,-28(fp)
   118f0:	e0bff617 	ldw	r2,-40(fp)
   118f4:	1885883a 	add	r2,r3,r2
   118f8:	10c1ffcc 	andi	r3,r2,2047
   118fc:	e0bffc17 	ldw	r2,-16(fp)
   11900:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   11904:	e0bffe17 	ldw	r2,-8(fp)
   11908:	00bfc716 	blt	zero,r2,11828 <_gp+0xffff4c34>
   1190c:	00000106 	br	11914 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   11910:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11914:	0005303a 	rdctl	r2,status
   11918:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1191c:	e0fffb17 	ldw	r3,-20(fp)
   11920:	00bfff84 	movi	r2,-2
   11924:	1884703a 	and	r2,r3,r2
   11928:	1001703a 	wrctl	status,r2
  
  return context;
   1192c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   11930:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   11934:	e0bffc17 	ldw	r2,-16(fp)
   11938:	10800817 	ldw	r2,32(r2)
   1193c:	10c00094 	ori	r3,r2,2
   11940:	e0bffc17 	ldw	r2,-16(fp)
   11944:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11948:	e0bffc17 	ldw	r2,-16(fp)
   1194c:	10800017 	ldw	r2,0(r2)
   11950:	10800104 	addi	r2,r2,4
   11954:	1007883a 	mov	r3,r2
   11958:	e0bffc17 	ldw	r2,-16(fp)
   1195c:	10800817 	ldw	r2,32(r2)
   11960:	18800035 	stwio	r2,0(r3)
   11964:	e0bffa17 	ldw	r2,-24(fp)
   11968:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1196c:	e0bff817 	ldw	r2,-32(fp)
   11970:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   11974:	e0bffe17 	ldw	r2,-8(fp)
   11978:	0080100e 	bge	zero,r2,119bc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   1197c:	e0bfff17 	ldw	r2,-4(fp)
   11980:	1090000c 	andi	r2,r2,16384
   11984:	1000101e 	bne	r2,zero,119c8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   11988:	0001883a 	nop
   1198c:	e0bffc17 	ldw	r2,-16(fp)
   11990:	10c00d17 	ldw	r3,52(r2)
   11994:	e0bff517 	ldw	r2,-44(fp)
   11998:	1880051e 	bne	r3,r2,119b0 <altera_avalon_jtag_uart_write+0x1b8>
   1199c:	e0bffc17 	ldw	r2,-16(fp)
   119a0:	10c00917 	ldw	r3,36(r2)
   119a4:	e0bffc17 	ldw	r2,-16(fp)
   119a8:	10800117 	ldw	r2,4(r2)
   119ac:	18bff736 	bltu	r3,r2,1198c <_gp+0xffff4d98>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   119b0:	e0bffc17 	ldw	r2,-16(fp)
   119b4:	10800917 	ldw	r2,36(r2)
   119b8:	1000051e 	bne	r2,zero,119d0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   119bc:	e0bffe17 	ldw	r2,-8(fp)
   119c0:	00bfd016 	blt	zero,r2,11904 <_gp+0xffff4d10>
   119c4:	00000306 	br	119d4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   119c8:	0001883a 	nop
   119cc:	00000106 	br	119d4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   119d0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   119d4:	e0fffd17 	ldw	r3,-12(fp)
   119d8:	e0bff717 	ldw	r2,-36(fp)
   119dc:	18800426 	beq	r3,r2,119f0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   119e0:	e0fffd17 	ldw	r3,-12(fp)
   119e4:	e0bff717 	ldw	r2,-36(fp)
   119e8:	1885c83a 	sub	r2,r3,r2
   119ec:	00000606 	br	11a08 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   119f0:	e0bfff17 	ldw	r2,-4(fp)
   119f4:	1090000c 	andi	r2,r2,16384
   119f8:	10000226 	beq	r2,zero,11a04 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   119fc:	00bffd44 	movi	r2,-11
   11a00:	00000106 	br	11a08 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   11a04:	00bffec4 	movi	r2,-5
}
   11a08:	e037883a 	mov	sp,fp
   11a0c:	dfc00117 	ldw	ra,4(sp)
   11a10:	df000017 	ldw	fp,0(sp)
   11a14:	dec00204 	addi	sp,sp,8
   11a18:	f800283a 	ret

00011a1c <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   11a1c:	defff404 	addi	sp,sp,-48
   11a20:	df000b15 	stw	fp,44(sp)
   11a24:	df000b04 	addi	fp,sp,44
   11a28:	e13ffc15 	stw	r4,-16(fp)
   11a2c:	e17ffd15 	stw	r5,-12(fp)
   11a30:	e1bffe15 	stw	r6,-8(fp)
   11a34:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   11a38:	e0ffff17 	ldw	r3,-4(fp)
   11a3c:	e0bffe17 	ldw	r2,-8(fp)
   11a40:	1885883a 	add	r2,r3,r2
   11a44:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   11a48:	e0c00217 	ldw	r3,8(fp)
   11a4c:	e0800117 	ldw	r2,4(fp)
   11a50:	1885883a 	add	r2,r3,r2
   11a54:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   11a58:	e0800117 	ldw	r2,4(fp)
   11a5c:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   11a60:	e0bffe17 	ldw	r2,-8(fp)
   11a64:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   11a68:	00800044 	movi	r2,1
   11a6c:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   11a70:	e0bffc17 	ldw	r2,-16(fp)
   11a74:	10800504 	addi	r2,r2,20
   11a78:	1009883a 	mov	r4,r2
   11a7c:	00c00044 	movi	r3,1
   11a80:	e0bffd17 	ldw	r2,-12(fp)
   11a84:	1884983a 	sll	r2,r3,r2
   11a88:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   11a8c:	e0800317 	ldw	r2,12(fp)
   11a90:	1080008c 	andi	r2,r2,2
   11a94:	1000051e 	bne	r2,zero,11aac <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   11a98:	e0bffc17 	ldw	r2,-16(fp)
   11a9c:	10800304 	addi	r2,r2,12
   11aa0:	1007883a 	mov	r3,r2
   11aa4:	00810004 	movi	r2,1024
   11aa8:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   11aac:	e0bffc17 	ldw	r2,-16(fp)
   11ab0:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   11ab4:	e0bffc17 	ldw	r2,-16(fp)
   11ab8:	10800204 	addi	r2,r2,8
   11abc:	10800037 	ldwio	r2,0(r2)
   11ac0:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   11ac4:	e0bffa17 	ldw	r2,-24(fp)
   11ac8:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   11acc:	10000226 	beq	r2,zero,11ad8 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   11ad0:	e0bff717 	ldw	r2,-36(fp)
   11ad4:	1000031e 	bne	r2,zero,11ae4 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   11ad8:	e0bffa17 	ldw	r2,-24(fp)
   11adc:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   11ae0:	103ff426 	beq	r2,zero,11ab4 <_gp+0xffff4ec0>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   11ae4:	e0bffa17 	ldw	r2,-24(fp)
   11ae8:	1080100c 	andi	r2,r2,64
   11aec:	10001e26 	beq	r2,zero,11b68 <alt_avalon_spi_command+0x14c>
   11af0:	e0bff717 	ldw	r2,-36(fp)
   11af4:	00801c0e 	bge	zero,r2,11b68 <alt_avalon_spi_command+0x14c>
    {
      credits--;
   11af8:	e0bff717 	ldw	r2,-36(fp)
   11afc:	10bfffc4 	addi	r2,r2,-1
   11b00:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   11b04:	e0ffff17 	ldw	r3,-4(fp)
   11b08:	e0bff817 	ldw	r2,-32(fp)
   11b0c:	18800a2e 	bgeu	r3,r2,11b38 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   11b10:	e0bffc17 	ldw	r2,-16(fp)
   11b14:	10800104 	addi	r2,r2,4
   11b18:	1009883a 	mov	r4,r2
   11b1c:	e0bfff17 	ldw	r2,-4(fp)
   11b20:	10c00044 	addi	r3,r2,1
   11b24:	e0ffff15 	stw	r3,-4(fp)
   11b28:	10800003 	ldbu	r2,0(r2)
   11b2c:	10803fcc 	andi	r2,r2,255
   11b30:	20800035 	stwio	r2,0(r4)
   11b34:	00000c06 	br	11b68 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   11b38:	e0bff517 	ldw	r2,-44(fp)
   11b3c:	10000826 	beq	r2,zero,11b60 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   11b40:	e0bff517 	ldw	r2,-44(fp)
   11b44:	10bfffc4 	addi	r2,r2,-1
   11b48:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   11b4c:	e0bffc17 	ldw	r2,-16(fp)
   11b50:	10800104 	addi	r2,r2,4
   11b54:	0007883a 	mov	r3,zero
   11b58:	10c00035 	stwio	r3,0(r2)
   11b5c:	00000206 	br	11b68 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   11b60:	00bf0004 	movi	r2,-1024
   11b64:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   11b68:	e0bffa17 	ldw	r2,-24(fp)
   11b6c:	1080200c 	andi	r2,r2,128
   11b70:	103fd026 	beq	r2,zero,11ab4 <_gp+0xffff4ec0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   11b74:	e0bffc17 	ldw	r2,-16(fp)
   11b78:	10800037 	ldwio	r2,0(r2)
   11b7c:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   11b80:	e0bff617 	ldw	r2,-40(fp)
   11b84:	10000426 	beq	r2,zero,11b98 <alt_avalon_spi_command+0x17c>
        read_ignore--;
   11b88:	e0bff617 	ldw	r2,-40(fp)
   11b8c:	10bfffc4 	addi	r2,r2,-1
   11b90:	e0bff615 	stw	r2,-40(fp)
   11b94:	00000506 	br	11bac <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
   11b98:	e0800217 	ldw	r2,8(fp)
   11b9c:	10c00044 	addi	r3,r2,1
   11ba0:	e0c00215 	stw	r3,8(fp)
   11ba4:	e0fffb17 	ldw	r3,-20(fp)
   11ba8:	10c00005 	stb	r3,0(r2)
      credits++;
   11bac:	e0bff717 	ldw	r2,-36(fp)
   11bb0:	10800044 	addi	r2,r2,1
   11bb4:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   11bb8:	e0bff617 	ldw	r2,-40(fp)
   11bbc:	103fbd1e 	bne	r2,zero,11ab4 <_gp+0xffff4ec0>
   11bc0:	e0c00217 	ldw	r3,8(fp)
   11bc4:	e0bff917 	ldw	r2,-28(fp)
   11bc8:	18bfba1e 	bne	r3,r2,11ab4 <_gp+0xffff4ec0>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   11bcc:	e0bffc17 	ldw	r2,-16(fp)
   11bd0:	10800204 	addi	r2,r2,8
   11bd4:	10800037 	ldwio	r2,0(r2)
   11bd8:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   11bdc:	e0bffa17 	ldw	r2,-24(fp)
   11be0:	1080080c 	andi	r2,r2,32
   11be4:	103ff926 	beq	r2,zero,11bcc <_gp+0xffff4fd8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   11be8:	e0800317 	ldw	r2,12(fp)
   11bec:	1080004c 	andi	r2,r2,1
   11bf0:	1000041e 	bne	r2,zero,11c04 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   11bf4:	e0bffc17 	ldw	r2,-16(fp)
   11bf8:	10800304 	addi	r2,r2,12
   11bfc:	0007883a 	mov	r3,zero
   11c00:	10c00035 	stwio	r3,0(r2)

  return read_length;
   11c04:	e0800117 	ldw	r2,4(fp)
}
   11c08:	e037883a 	mov	sp,fp
   11c0c:	df000017 	ldw	fp,0(sp)
   11c10:	dec00104 	addi	sp,sp,4
   11c14:	f800283a 	ret

00011c18 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   11c18:	defffa04 	addi	sp,sp,-24
   11c1c:	dfc00515 	stw	ra,20(sp)
   11c20:	df000415 	stw	fp,16(sp)
   11c24:	df000404 	addi	fp,sp,16
   11c28:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   11c2c:	0007883a 	mov	r3,zero
   11c30:	e0bfff17 	ldw	r2,-4(fp)
   11c34:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   11c38:	e0bfff17 	ldw	r2,-4(fp)
   11c3c:	10800104 	addi	r2,r2,4
   11c40:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11c44:	0005303a 	rdctl	r2,status
   11c48:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11c4c:	e0fffd17 	ldw	r3,-12(fp)
   11c50:	00bfff84 	movi	r2,-2
   11c54:	1884703a 	and	r2,r3,r2
   11c58:	1001703a 	wrctl	status,r2
  
  return context;
   11c5c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   11c60:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   11c64:	00128fc0 	call	128fc <alt_tick>
   11c68:	e0bffc17 	ldw	r2,-16(fp)
   11c6c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11c70:	e0bffe17 	ldw	r2,-8(fp)
   11c74:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   11c78:	0001883a 	nop
   11c7c:	e037883a 	mov	sp,fp
   11c80:	dfc00117 	ldw	ra,4(sp)
   11c84:	df000017 	ldw	fp,0(sp)
   11c88:	dec00204 	addi	sp,sp,8
   11c8c:	f800283a 	ret

00011c90 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   11c90:	defff804 	addi	sp,sp,-32
   11c94:	dfc00715 	stw	ra,28(sp)
   11c98:	df000615 	stw	fp,24(sp)
   11c9c:	df000604 	addi	fp,sp,24
   11ca0:	e13ffc15 	stw	r4,-16(fp)
   11ca4:	e17ffd15 	stw	r5,-12(fp)
   11ca8:	e1bffe15 	stw	r6,-8(fp)
   11cac:	e1ffff15 	stw	r7,-4(fp)
   11cb0:	e0bfff17 	ldw	r2,-4(fp)
   11cb4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   11cb8:	d0a67017 	ldw	r2,-26176(gp)
   11cbc:	1000021e 	bne	r2,zero,11cc8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   11cc0:	e0bffb17 	ldw	r2,-20(fp)
   11cc4:	d0a67015 	stw	r2,-26176(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   11cc8:	e0bffc17 	ldw	r2,-16(fp)
   11ccc:	10800104 	addi	r2,r2,4
   11cd0:	00c001c4 	movi	r3,7
   11cd4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   11cd8:	d8000015 	stw	zero,0(sp)
   11cdc:	e1fffc17 	ldw	r7,-16(fp)
   11ce0:	01800074 	movhi	r6,1
   11ce4:	31870604 	addi	r6,r6,7192
   11ce8:	e17ffe17 	ldw	r5,-8(fp)
   11cec:	e13ffd17 	ldw	r4,-12(fp)
   11cf0:	00121580 	call	12158 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   11cf4:	0001883a 	nop
   11cf8:	e037883a 	mov	sp,fp
   11cfc:	dfc00117 	ldw	ra,4(sp)
   11d00:	df000017 	ldw	fp,0(sp)
   11d04:	dec00204 	addi	sp,sp,8
   11d08:	f800283a 	ret

00011d0c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   11d0c:	defff504 	addi	sp,sp,-44
   11d10:	df000a15 	stw	fp,40(sp)
   11d14:	df000a04 	addi	fp,sp,40
   11d18:	e13ffc15 	stw	r4,-16(fp)
   11d1c:	e17ffd15 	stw	r5,-12(fp)
   11d20:	e1bffe15 	stw	r6,-8(fp)
   11d24:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   11d28:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   11d2c:	d0a67017 	ldw	r2,-26176(gp)
  
  if (alt_ticks_per_second ())
   11d30:	10003c26 	beq	r2,zero,11e24 <alt_alarm_start+0x118>
  {
    if (alarm)
   11d34:	e0bffc17 	ldw	r2,-16(fp)
   11d38:	10003826 	beq	r2,zero,11e1c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   11d3c:	e0bffc17 	ldw	r2,-16(fp)
   11d40:	e0fffe17 	ldw	r3,-8(fp)
   11d44:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   11d48:	e0bffc17 	ldw	r2,-16(fp)
   11d4c:	e0ffff17 	ldw	r3,-4(fp)
   11d50:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11d54:	0005303a 	rdctl	r2,status
   11d58:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11d5c:	e0fff917 	ldw	r3,-28(fp)
   11d60:	00bfff84 	movi	r2,-2
   11d64:	1884703a 	and	r2,r3,r2
   11d68:	1001703a 	wrctl	status,r2
  
  return context;
   11d6c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   11d70:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   11d74:	d0a67117 	ldw	r2,-26172(gp)
      
      current_nticks = alt_nticks();
   11d78:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   11d7c:	e0fffd17 	ldw	r3,-12(fp)
   11d80:	e0bff617 	ldw	r2,-40(fp)
   11d84:	1885883a 	add	r2,r3,r2
   11d88:	10c00044 	addi	r3,r2,1
   11d8c:	e0bffc17 	ldw	r2,-16(fp)
   11d90:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   11d94:	e0bffc17 	ldw	r2,-16(fp)
   11d98:	10c00217 	ldw	r3,8(r2)
   11d9c:	e0bff617 	ldw	r2,-40(fp)
   11da0:	1880042e 	bgeu	r3,r2,11db4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   11da4:	e0bffc17 	ldw	r2,-16(fp)
   11da8:	00c00044 	movi	r3,1
   11dac:	10c00405 	stb	r3,16(r2)
   11db0:	00000206 	br	11dbc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   11db4:	e0bffc17 	ldw	r2,-16(fp)
   11db8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   11dbc:	e0bffc17 	ldw	r2,-16(fp)
   11dc0:	d0e01304 	addi	r3,gp,-32692
   11dc4:	e0fffa15 	stw	r3,-24(fp)
   11dc8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11dcc:	e0bffb17 	ldw	r2,-20(fp)
   11dd0:	e0fffa17 	ldw	r3,-24(fp)
   11dd4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11dd8:	e0bffa17 	ldw	r2,-24(fp)
   11ddc:	10c00017 	ldw	r3,0(r2)
   11de0:	e0bffb17 	ldw	r2,-20(fp)
   11de4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11de8:	e0bffa17 	ldw	r2,-24(fp)
   11dec:	10800017 	ldw	r2,0(r2)
   11df0:	e0fffb17 	ldw	r3,-20(fp)
   11df4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11df8:	e0bffa17 	ldw	r2,-24(fp)
   11dfc:	e0fffb17 	ldw	r3,-20(fp)
   11e00:	10c00015 	stw	r3,0(r2)
   11e04:	e0bff817 	ldw	r2,-32(fp)
   11e08:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11e0c:	e0bff717 	ldw	r2,-36(fp)
   11e10:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   11e14:	0005883a 	mov	r2,zero
   11e18:	00000306 	br	11e28 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   11e1c:	00bffa84 	movi	r2,-22
   11e20:	00000106 	br	11e28 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   11e24:	00bfde84 	movi	r2,-134
  }
}
   11e28:	e037883a 	mov	sp,fp
   11e2c:	df000017 	ldw	fp,0(sp)
   11e30:	dec00104 	addi	sp,sp,4
   11e34:	f800283a 	ret

00011e38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11e38:	defffe04 	addi	sp,sp,-8
   11e3c:	dfc00115 	stw	ra,4(sp)
   11e40:	df000015 	stw	fp,0(sp)
   11e44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11e48:	d0a01117 	ldw	r2,-32700(gp)
   11e4c:	10000326 	beq	r2,zero,11e5c <alt_get_errno+0x24>
   11e50:	d0a01117 	ldw	r2,-32700(gp)
   11e54:	103ee83a 	callr	r2
   11e58:	00000106 	br	11e60 <alt_get_errno+0x28>
   11e5c:	d0a67304 	addi	r2,gp,-26164
}
   11e60:	e037883a 	mov	sp,fp
   11e64:	dfc00117 	ldw	ra,4(sp)
   11e68:	df000017 	ldw	fp,0(sp)
   11e6c:	dec00204 	addi	sp,sp,8
   11e70:	f800283a 	ret

00011e74 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   11e74:	defffb04 	addi	sp,sp,-20
   11e78:	dfc00415 	stw	ra,16(sp)
   11e7c:	df000315 	stw	fp,12(sp)
   11e80:	df000304 	addi	fp,sp,12
   11e84:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   11e88:	e0bfff17 	ldw	r2,-4(fp)
   11e8c:	10000816 	blt	r2,zero,11eb0 <close+0x3c>
   11e90:	01400304 	movi	r5,12
   11e94:	e13fff17 	ldw	r4,-4(fp)
   11e98:	00132600 	call	13260 <__mulsi3>
   11e9c:	1007883a 	mov	r3,r2
   11ea0:	00800074 	movhi	r2,1
   11ea4:	10929d04 	addi	r2,r2,19060
   11ea8:	1885883a 	add	r2,r3,r2
   11eac:	00000106 	br	11eb4 <close+0x40>
   11eb0:	0005883a 	mov	r2,zero
   11eb4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   11eb8:	e0bffd17 	ldw	r2,-12(fp)
   11ebc:	10001926 	beq	r2,zero,11f24 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   11ec0:	e0bffd17 	ldw	r2,-12(fp)
   11ec4:	10800017 	ldw	r2,0(r2)
   11ec8:	10800417 	ldw	r2,16(r2)
   11ecc:	10000626 	beq	r2,zero,11ee8 <close+0x74>
   11ed0:	e0bffd17 	ldw	r2,-12(fp)
   11ed4:	10800017 	ldw	r2,0(r2)
   11ed8:	10800417 	ldw	r2,16(r2)
   11edc:	e13ffd17 	ldw	r4,-12(fp)
   11ee0:	103ee83a 	callr	r2
   11ee4:	00000106 	br	11eec <close+0x78>
   11ee8:	0005883a 	mov	r2,zero
   11eec:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   11ef0:	e13fff17 	ldw	r4,-4(fp)
   11ef4:	00127dc0 	call	127dc <alt_release_fd>
    if (rval < 0)
   11ef8:	e0bffe17 	ldw	r2,-8(fp)
   11efc:	1000070e 	bge	r2,zero,11f1c <close+0xa8>
    {
      ALT_ERRNO = -rval;
   11f00:	0011e380 	call	11e38 <alt_get_errno>
   11f04:	1007883a 	mov	r3,r2
   11f08:	e0bffe17 	ldw	r2,-8(fp)
   11f0c:	0085c83a 	sub	r2,zero,r2
   11f10:	18800015 	stw	r2,0(r3)
      return -1;
   11f14:	00bfffc4 	movi	r2,-1
   11f18:	00000706 	br	11f38 <close+0xc4>
    }
    return 0;
   11f1c:	0005883a 	mov	r2,zero
   11f20:	00000506 	br	11f38 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11f24:	0011e380 	call	11e38 <alt_get_errno>
   11f28:	1007883a 	mov	r3,r2
   11f2c:	00801444 	movi	r2,81
   11f30:	18800015 	stw	r2,0(r3)
    return -1;
   11f34:	00bfffc4 	movi	r2,-1
  }
}
   11f38:	e037883a 	mov	sp,fp
   11f3c:	dfc00117 	ldw	ra,4(sp)
   11f40:	df000017 	ldw	fp,0(sp)
   11f44:	dec00204 	addi	sp,sp,8
   11f48:	f800283a 	ret

00011f4c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11f4c:	deffff04 	addi	sp,sp,-4
   11f50:	df000015 	stw	fp,0(sp)
   11f54:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   11f58:	0001883a 	nop
   11f5c:	e037883a 	mov	sp,fp
   11f60:	df000017 	ldw	fp,0(sp)
   11f64:	dec00104 	addi	sp,sp,4
   11f68:	f800283a 	ret

00011f6c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   11f6c:	defffc04 	addi	sp,sp,-16
   11f70:	df000315 	stw	fp,12(sp)
   11f74:	df000304 	addi	fp,sp,12
   11f78:	e13ffd15 	stw	r4,-12(fp)
   11f7c:	e17ffe15 	stw	r5,-8(fp)
   11f80:	e1bfff15 	stw	r6,-4(fp)
  return len;
   11f84:	e0bfff17 	ldw	r2,-4(fp)
}
   11f88:	e037883a 	mov	sp,fp
   11f8c:	df000017 	ldw	fp,0(sp)
   11f90:	dec00104 	addi	sp,sp,4
   11f94:	f800283a 	ret

00011f98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11f98:	defffe04 	addi	sp,sp,-8
   11f9c:	dfc00115 	stw	ra,4(sp)
   11fa0:	df000015 	stw	fp,0(sp)
   11fa4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11fa8:	d0a01117 	ldw	r2,-32700(gp)
   11fac:	10000326 	beq	r2,zero,11fbc <alt_get_errno+0x24>
   11fb0:	d0a01117 	ldw	r2,-32700(gp)
   11fb4:	103ee83a 	callr	r2
   11fb8:	00000106 	br	11fc0 <alt_get_errno+0x28>
   11fbc:	d0a67304 	addi	r2,gp,-26164
}
   11fc0:	e037883a 	mov	sp,fp
   11fc4:	dfc00117 	ldw	ra,4(sp)
   11fc8:	df000017 	ldw	fp,0(sp)
   11fcc:	dec00204 	addi	sp,sp,8
   11fd0:	f800283a 	ret

00011fd4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   11fd4:	defffa04 	addi	sp,sp,-24
   11fd8:	dfc00515 	stw	ra,20(sp)
   11fdc:	df000415 	stw	fp,16(sp)
   11fe0:	df000404 	addi	fp,sp,16
   11fe4:	e13ffe15 	stw	r4,-8(fp)
   11fe8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11fec:	e0bffe17 	ldw	r2,-8(fp)
   11ff0:	10000326 	beq	r2,zero,12000 <alt_dev_llist_insert+0x2c>
   11ff4:	e0bffe17 	ldw	r2,-8(fp)
   11ff8:	10800217 	ldw	r2,8(r2)
   11ffc:	1000061e 	bne	r2,zero,12018 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   12000:	0011f980 	call	11f98 <alt_get_errno>
   12004:	1007883a 	mov	r3,r2
   12008:	00800584 	movi	r2,22
   1200c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   12010:	00bffa84 	movi	r2,-22
   12014:	00001306 	br	12064 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   12018:	e0bffe17 	ldw	r2,-8(fp)
   1201c:	e0ffff17 	ldw	r3,-4(fp)
   12020:	e0fffc15 	stw	r3,-16(fp)
   12024:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   12028:	e0bffd17 	ldw	r2,-12(fp)
   1202c:	e0fffc17 	ldw	r3,-16(fp)
   12030:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   12034:	e0bffc17 	ldw	r2,-16(fp)
   12038:	10c00017 	ldw	r3,0(r2)
   1203c:	e0bffd17 	ldw	r2,-12(fp)
   12040:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   12044:	e0bffc17 	ldw	r2,-16(fp)
   12048:	10800017 	ldw	r2,0(r2)
   1204c:	e0fffd17 	ldw	r3,-12(fp)
   12050:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   12054:	e0bffc17 	ldw	r2,-16(fp)
   12058:	e0fffd17 	ldw	r3,-12(fp)
   1205c:	10c00015 	stw	r3,0(r2)

  return 0;  
   12060:	0005883a 	mov	r2,zero
}
   12064:	e037883a 	mov	sp,fp
   12068:	dfc00117 	ldw	ra,4(sp)
   1206c:	df000017 	ldw	fp,0(sp)
   12070:	dec00204 	addi	sp,sp,8
   12074:	f800283a 	ret

00012078 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   12078:	defffd04 	addi	sp,sp,-12
   1207c:	dfc00215 	stw	ra,8(sp)
   12080:	df000115 	stw	fp,4(sp)
   12084:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   12088:	00800074 	movhi	r2,1
   1208c:	108cae04 	addi	r2,r2,12984
   12090:	e0bfff15 	stw	r2,-4(fp)
   12094:	00000606 	br	120b0 <_do_ctors+0x38>
        (*ctor) (); 
   12098:	e0bfff17 	ldw	r2,-4(fp)
   1209c:	10800017 	ldw	r2,0(r2)
   120a0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   120a4:	e0bfff17 	ldw	r2,-4(fp)
   120a8:	10bfff04 	addi	r2,r2,-4
   120ac:	e0bfff15 	stw	r2,-4(fp)
   120b0:	e0ffff17 	ldw	r3,-4(fp)
   120b4:	00800074 	movhi	r2,1
   120b8:	108caf04 	addi	r2,r2,12988
   120bc:	18bff62e 	bgeu	r3,r2,12098 <_gp+0xffff54a4>
        (*ctor) (); 
}
   120c0:	0001883a 	nop
   120c4:	e037883a 	mov	sp,fp
   120c8:	dfc00117 	ldw	ra,4(sp)
   120cc:	df000017 	ldw	fp,0(sp)
   120d0:	dec00204 	addi	sp,sp,8
   120d4:	f800283a 	ret

000120d8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   120d8:	defffd04 	addi	sp,sp,-12
   120dc:	dfc00215 	stw	ra,8(sp)
   120e0:	df000115 	stw	fp,4(sp)
   120e4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   120e8:	00800074 	movhi	r2,1
   120ec:	108cae04 	addi	r2,r2,12984
   120f0:	e0bfff15 	stw	r2,-4(fp)
   120f4:	00000606 	br	12110 <_do_dtors+0x38>
        (*dtor) (); 
   120f8:	e0bfff17 	ldw	r2,-4(fp)
   120fc:	10800017 	ldw	r2,0(r2)
   12100:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   12104:	e0bfff17 	ldw	r2,-4(fp)
   12108:	10bfff04 	addi	r2,r2,-4
   1210c:	e0bfff15 	stw	r2,-4(fp)
   12110:	e0ffff17 	ldw	r3,-4(fp)
   12114:	00800074 	movhi	r2,1
   12118:	108caf04 	addi	r2,r2,12988
   1211c:	18bff62e 	bgeu	r3,r2,120f8 <_gp+0xffff5504>
        (*dtor) (); 
}
   12120:	0001883a 	nop
   12124:	e037883a 	mov	sp,fp
   12128:	dfc00117 	ldw	ra,4(sp)
   1212c:	df000017 	ldw	fp,0(sp)
   12130:	dec00204 	addi	sp,sp,8
   12134:	f800283a 	ret

00012138 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   12138:	deffff04 	addi	sp,sp,-4
   1213c:	df000015 	stw	fp,0(sp)
   12140:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   12144:	0001883a 	nop
   12148:	e037883a 	mov	sp,fp
   1214c:	df000017 	ldw	fp,0(sp)
   12150:	dec00104 	addi	sp,sp,4
   12154:	f800283a 	ret

00012158 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   12158:	defff904 	addi	sp,sp,-28
   1215c:	dfc00615 	stw	ra,24(sp)
   12160:	df000515 	stw	fp,20(sp)
   12164:	df000504 	addi	fp,sp,20
   12168:	e13ffc15 	stw	r4,-16(fp)
   1216c:	e17ffd15 	stw	r5,-12(fp)
   12170:	e1bffe15 	stw	r6,-8(fp)
   12174:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   12178:	e0800217 	ldw	r2,8(fp)
   1217c:	d8800015 	stw	r2,0(sp)
   12180:	e1ffff17 	ldw	r7,-4(fp)
   12184:	e1bffe17 	ldw	r6,-8(fp)
   12188:	e17ffd17 	ldw	r5,-12(fp)
   1218c:	e13ffc17 	ldw	r4,-16(fp)
   12190:	00123080 	call	12308 <alt_iic_isr_register>
}  
   12194:	e037883a 	mov	sp,fp
   12198:	dfc00117 	ldw	ra,4(sp)
   1219c:	df000017 	ldw	fp,0(sp)
   121a0:	dec00204 	addi	sp,sp,8
   121a4:	f800283a 	ret

000121a8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   121a8:	defff904 	addi	sp,sp,-28
   121ac:	df000615 	stw	fp,24(sp)
   121b0:	df000604 	addi	fp,sp,24
   121b4:	e13ffe15 	stw	r4,-8(fp)
   121b8:	e17fff15 	stw	r5,-4(fp)
   121bc:	e0bfff17 	ldw	r2,-4(fp)
   121c0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   121c4:	0005303a 	rdctl	r2,status
   121c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   121cc:	e0fffb17 	ldw	r3,-20(fp)
   121d0:	00bfff84 	movi	r2,-2
   121d4:	1884703a 	and	r2,r3,r2
   121d8:	1001703a 	wrctl	status,r2
  
  return context;
   121dc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   121e0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   121e4:	00c00044 	movi	r3,1
   121e8:	e0bffa17 	ldw	r2,-24(fp)
   121ec:	1884983a 	sll	r2,r3,r2
   121f0:	1007883a 	mov	r3,r2
   121f4:	d0a66f17 	ldw	r2,-26180(gp)
   121f8:	1884b03a 	or	r2,r3,r2
   121fc:	d0a66f15 	stw	r2,-26180(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   12200:	d0a66f17 	ldw	r2,-26180(gp)
   12204:	100170fa 	wrctl	ienable,r2
   12208:	e0bffc17 	ldw	r2,-16(fp)
   1220c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12210:	e0bffd17 	ldw	r2,-12(fp)
   12214:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   12218:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   1221c:	0001883a 	nop
}
   12220:	e037883a 	mov	sp,fp
   12224:	df000017 	ldw	fp,0(sp)
   12228:	dec00104 	addi	sp,sp,4
   1222c:	f800283a 	ret

00012230 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   12230:	defff904 	addi	sp,sp,-28
   12234:	df000615 	stw	fp,24(sp)
   12238:	df000604 	addi	fp,sp,24
   1223c:	e13ffe15 	stw	r4,-8(fp)
   12240:	e17fff15 	stw	r5,-4(fp)
   12244:	e0bfff17 	ldw	r2,-4(fp)
   12248:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1224c:	0005303a 	rdctl	r2,status
   12250:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12254:	e0fffb17 	ldw	r3,-20(fp)
   12258:	00bfff84 	movi	r2,-2
   1225c:	1884703a 	and	r2,r3,r2
   12260:	1001703a 	wrctl	status,r2
  
  return context;
   12264:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   12268:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   1226c:	00c00044 	movi	r3,1
   12270:	e0bffa17 	ldw	r2,-24(fp)
   12274:	1884983a 	sll	r2,r3,r2
   12278:	0084303a 	nor	r2,zero,r2
   1227c:	1007883a 	mov	r3,r2
   12280:	d0a66f17 	ldw	r2,-26180(gp)
   12284:	1884703a 	and	r2,r3,r2
   12288:	d0a66f15 	stw	r2,-26180(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1228c:	d0a66f17 	ldw	r2,-26180(gp)
   12290:	100170fa 	wrctl	ienable,r2
   12294:	e0bffc17 	ldw	r2,-16(fp)
   12298:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1229c:	e0bffd17 	ldw	r2,-12(fp)
   122a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   122a4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   122a8:	0001883a 	nop
}
   122ac:	e037883a 	mov	sp,fp
   122b0:	df000017 	ldw	fp,0(sp)
   122b4:	dec00104 	addi	sp,sp,4
   122b8:	f800283a 	ret

000122bc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   122bc:	defffc04 	addi	sp,sp,-16
   122c0:	df000315 	stw	fp,12(sp)
   122c4:	df000304 	addi	fp,sp,12
   122c8:	e13ffe15 	stw	r4,-8(fp)
   122cc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   122d0:	000530fa 	rdctl	r2,ienable
   122d4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   122d8:	00c00044 	movi	r3,1
   122dc:	e0bfff17 	ldw	r2,-4(fp)
   122e0:	1884983a 	sll	r2,r3,r2
   122e4:	1007883a 	mov	r3,r2
   122e8:	e0bffd17 	ldw	r2,-12(fp)
   122ec:	1884703a 	and	r2,r3,r2
   122f0:	1004c03a 	cmpne	r2,r2,zero
   122f4:	10803fcc 	andi	r2,r2,255
}
   122f8:	e037883a 	mov	sp,fp
   122fc:	df000017 	ldw	fp,0(sp)
   12300:	dec00104 	addi	sp,sp,4
   12304:	f800283a 	ret

00012308 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   12308:	defff504 	addi	sp,sp,-44
   1230c:	dfc00a15 	stw	ra,40(sp)
   12310:	df000915 	stw	fp,36(sp)
   12314:	df000904 	addi	fp,sp,36
   12318:	e13ffc15 	stw	r4,-16(fp)
   1231c:	e17ffd15 	stw	r5,-12(fp)
   12320:	e1bffe15 	stw	r6,-8(fp)
   12324:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   12328:	00bffa84 	movi	r2,-22
   1232c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   12330:	e0bffd17 	ldw	r2,-12(fp)
   12334:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   12338:	e0bff817 	ldw	r2,-32(fp)
   1233c:	10800808 	cmpgei	r2,r2,32
   12340:	1000271e 	bne	r2,zero,123e0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12344:	0005303a 	rdctl	r2,status
   12348:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1234c:	e0fffb17 	ldw	r3,-20(fp)
   12350:	00bfff84 	movi	r2,-2
   12354:	1884703a 	and	r2,r3,r2
   12358:	1001703a 	wrctl	status,r2
  
  return context;
   1235c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   12360:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   12364:	00800074 	movhi	r2,1
   12368:	10997104 	addi	r2,r2,26052
   1236c:	e0fff817 	ldw	r3,-32(fp)
   12370:	180690fa 	slli	r3,r3,3
   12374:	10c5883a 	add	r2,r2,r3
   12378:	e0fffe17 	ldw	r3,-8(fp)
   1237c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   12380:	00800074 	movhi	r2,1
   12384:	10997104 	addi	r2,r2,26052
   12388:	e0fff817 	ldw	r3,-32(fp)
   1238c:	180690fa 	slli	r3,r3,3
   12390:	10c5883a 	add	r2,r2,r3
   12394:	10800104 	addi	r2,r2,4
   12398:	e0ffff17 	ldw	r3,-4(fp)
   1239c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   123a0:	e0bffe17 	ldw	r2,-8(fp)
   123a4:	10000526 	beq	r2,zero,123bc <alt_iic_isr_register+0xb4>
   123a8:	e0bff817 	ldw	r2,-32(fp)
   123ac:	100b883a 	mov	r5,r2
   123b0:	e13ffc17 	ldw	r4,-16(fp)
   123b4:	00121a80 	call	121a8 <alt_ic_irq_enable>
   123b8:	00000406 	br	123cc <alt_iic_isr_register+0xc4>
   123bc:	e0bff817 	ldw	r2,-32(fp)
   123c0:	100b883a 	mov	r5,r2
   123c4:	e13ffc17 	ldw	r4,-16(fp)
   123c8:	00122300 	call	12230 <alt_ic_irq_disable>
   123cc:	e0bff715 	stw	r2,-36(fp)
   123d0:	e0bffa17 	ldw	r2,-24(fp)
   123d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   123d8:	e0bff917 	ldw	r2,-28(fp)
   123dc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   123e0:	e0bff717 	ldw	r2,-36(fp)
}
   123e4:	e037883a 	mov	sp,fp
   123e8:	dfc00117 	ldw	ra,4(sp)
   123ec:	df000017 	ldw	fp,0(sp)
   123f0:	dec00204 	addi	sp,sp,8
   123f4:	f800283a 	ret

000123f8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   123f8:	defff804 	addi	sp,sp,-32
   123fc:	dfc00715 	stw	ra,28(sp)
   12400:	df000615 	stw	fp,24(sp)
   12404:	dc000515 	stw	r16,20(sp)
   12408:	df000604 	addi	fp,sp,24
   1240c:	e13ffb15 	stw	r4,-20(fp)
   12410:	e17ffc15 	stw	r5,-16(fp)
   12414:	e1bffd15 	stw	r6,-12(fp)
   12418:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   1241c:	e1bffe17 	ldw	r6,-8(fp)
   12420:	e17ffd17 	ldw	r5,-12(fp)
   12424:	e13ffc17 	ldw	r4,-16(fp)
   12428:	00126800 	call	12680 <open>
   1242c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   12430:	e0bffa17 	ldw	r2,-24(fp)
   12434:	10002216 	blt	r2,zero,124c0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   12438:	04000074 	movhi	r16,1
   1243c:	84129d04 	addi	r16,r16,19060
   12440:	e0bffa17 	ldw	r2,-24(fp)
   12444:	01400304 	movi	r5,12
   12448:	1009883a 	mov	r4,r2
   1244c:	00132600 	call	13260 <__mulsi3>
   12450:	8085883a 	add	r2,r16,r2
   12454:	10c00017 	ldw	r3,0(r2)
   12458:	e0bffb17 	ldw	r2,-20(fp)
   1245c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   12460:	04000074 	movhi	r16,1
   12464:	84129d04 	addi	r16,r16,19060
   12468:	e0bffa17 	ldw	r2,-24(fp)
   1246c:	01400304 	movi	r5,12
   12470:	1009883a 	mov	r4,r2
   12474:	00132600 	call	13260 <__mulsi3>
   12478:	8085883a 	add	r2,r16,r2
   1247c:	10800104 	addi	r2,r2,4
   12480:	10c00017 	ldw	r3,0(r2)
   12484:	e0bffb17 	ldw	r2,-20(fp)
   12488:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1248c:	04000074 	movhi	r16,1
   12490:	84129d04 	addi	r16,r16,19060
   12494:	e0bffa17 	ldw	r2,-24(fp)
   12498:	01400304 	movi	r5,12
   1249c:	1009883a 	mov	r4,r2
   124a0:	00132600 	call	13260 <__mulsi3>
   124a4:	8085883a 	add	r2,r16,r2
   124a8:	10800204 	addi	r2,r2,8
   124ac:	10c00017 	ldw	r3,0(r2)
   124b0:	e0bffb17 	ldw	r2,-20(fp)
   124b4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   124b8:	e13ffa17 	ldw	r4,-24(fp)
   124bc:	00127dc0 	call	127dc <alt_release_fd>
  }
} 
   124c0:	0001883a 	nop
   124c4:	e6ffff04 	addi	sp,fp,-4
   124c8:	dfc00217 	ldw	ra,8(sp)
   124cc:	df000117 	ldw	fp,4(sp)
   124d0:	dc000017 	ldw	r16,0(sp)
   124d4:	dec00304 	addi	sp,sp,12
   124d8:	f800283a 	ret

000124dc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   124dc:	defffb04 	addi	sp,sp,-20
   124e0:	dfc00415 	stw	ra,16(sp)
   124e4:	df000315 	stw	fp,12(sp)
   124e8:	df000304 	addi	fp,sp,12
   124ec:	e13ffd15 	stw	r4,-12(fp)
   124f0:	e17ffe15 	stw	r5,-8(fp)
   124f4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   124f8:	01c07fc4 	movi	r7,511
   124fc:	01800044 	movi	r6,1
   12500:	e17ffd17 	ldw	r5,-12(fp)
   12504:	01000074 	movhi	r4,1
   12508:	2112a004 	addi	r4,r4,19072
   1250c:	00123f80 	call	123f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   12510:	01c07fc4 	movi	r7,511
   12514:	000d883a 	mov	r6,zero
   12518:	e17ffe17 	ldw	r5,-8(fp)
   1251c:	01000074 	movhi	r4,1
   12520:	21129d04 	addi	r4,r4,19060
   12524:	00123f80 	call	123f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   12528:	01c07fc4 	movi	r7,511
   1252c:	01800044 	movi	r6,1
   12530:	e17fff17 	ldw	r5,-4(fp)
   12534:	01000074 	movhi	r4,1
   12538:	2112a304 	addi	r4,r4,19084
   1253c:	00123f80 	call	123f8 <alt_open_fd>
}  
   12540:	0001883a 	nop
   12544:	e037883a 	mov	sp,fp
   12548:	dfc00117 	ldw	ra,4(sp)
   1254c:	df000017 	ldw	fp,0(sp)
   12550:	dec00204 	addi	sp,sp,8
   12554:	f800283a 	ret

00012558 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12558:	defffe04 	addi	sp,sp,-8
   1255c:	dfc00115 	stw	ra,4(sp)
   12560:	df000015 	stw	fp,0(sp)
   12564:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12568:	d0a01117 	ldw	r2,-32700(gp)
   1256c:	10000326 	beq	r2,zero,1257c <alt_get_errno+0x24>
   12570:	d0a01117 	ldw	r2,-32700(gp)
   12574:	103ee83a 	callr	r2
   12578:	00000106 	br	12580 <alt_get_errno+0x28>
   1257c:	d0a67304 	addi	r2,gp,-26164
}
   12580:	e037883a 	mov	sp,fp
   12584:	dfc00117 	ldw	ra,4(sp)
   12588:	df000017 	ldw	fp,0(sp)
   1258c:	dec00204 	addi	sp,sp,8
   12590:	f800283a 	ret

00012594 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   12594:	defffb04 	addi	sp,sp,-20
   12598:	dfc00415 	stw	ra,16(sp)
   1259c:	df000315 	stw	fp,12(sp)
   125a0:	dc000215 	stw	r16,8(sp)
   125a4:	df000304 	addi	fp,sp,12
   125a8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   125ac:	e0bffe17 	ldw	r2,-8(fp)
   125b0:	10800217 	ldw	r2,8(r2)
   125b4:	10d00034 	orhi	r3,r2,16384
   125b8:	e0bffe17 	ldw	r2,-8(fp)
   125bc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   125c0:	e03ffd15 	stw	zero,-12(fp)
   125c4:	00002306 	br	12654 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   125c8:	04000074 	movhi	r16,1
   125cc:	84129d04 	addi	r16,r16,19060
   125d0:	e0bffd17 	ldw	r2,-12(fp)
   125d4:	01400304 	movi	r5,12
   125d8:	1009883a 	mov	r4,r2
   125dc:	00132600 	call	13260 <__mulsi3>
   125e0:	8085883a 	add	r2,r16,r2
   125e4:	10c00017 	ldw	r3,0(r2)
   125e8:	e0bffe17 	ldw	r2,-8(fp)
   125ec:	10800017 	ldw	r2,0(r2)
   125f0:	1880151e 	bne	r3,r2,12648 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   125f4:	04000074 	movhi	r16,1
   125f8:	84129d04 	addi	r16,r16,19060
   125fc:	e0bffd17 	ldw	r2,-12(fp)
   12600:	01400304 	movi	r5,12
   12604:	1009883a 	mov	r4,r2
   12608:	00132600 	call	13260 <__mulsi3>
   1260c:	8085883a 	add	r2,r16,r2
   12610:	10800204 	addi	r2,r2,8
   12614:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   12618:	10000b0e 	bge	r2,zero,12648 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1261c:	01400304 	movi	r5,12
   12620:	e13ffd17 	ldw	r4,-12(fp)
   12624:	00132600 	call	13260 <__mulsi3>
   12628:	1007883a 	mov	r3,r2
   1262c:	00800074 	movhi	r2,1
   12630:	10929d04 	addi	r2,r2,19060
   12634:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   12638:	e0bffe17 	ldw	r2,-8(fp)
   1263c:	18800226 	beq	r3,r2,12648 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   12640:	00bffcc4 	movi	r2,-13
   12644:	00000806 	br	12668 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   12648:	e0bffd17 	ldw	r2,-12(fp)
   1264c:	10800044 	addi	r2,r2,1
   12650:	e0bffd15 	stw	r2,-12(fp)
   12654:	d0a01017 	ldw	r2,-32704(gp)
   12658:	1007883a 	mov	r3,r2
   1265c:	e0bffd17 	ldw	r2,-12(fp)
   12660:	18bfd92e 	bgeu	r3,r2,125c8 <_gp+0xffff59d4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   12664:	0005883a 	mov	r2,zero
}
   12668:	e6ffff04 	addi	sp,fp,-4
   1266c:	dfc00217 	ldw	ra,8(sp)
   12670:	df000117 	ldw	fp,4(sp)
   12674:	dc000017 	ldw	r16,0(sp)
   12678:	dec00304 	addi	sp,sp,12
   1267c:	f800283a 	ret

00012680 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   12680:	defff604 	addi	sp,sp,-40
   12684:	dfc00915 	stw	ra,36(sp)
   12688:	df000815 	stw	fp,32(sp)
   1268c:	df000804 	addi	fp,sp,32
   12690:	e13ffd15 	stw	r4,-12(fp)
   12694:	e17ffe15 	stw	r5,-8(fp)
   12698:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1269c:	00bfffc4 	movi	r2,-1
   126a0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   126a4:	00bffb44 	movi	r2,-19
   126a8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   126ac:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   126b0:	d1600e04 	addi	r5,gp,-32712
   126b4:	e13ffd17 	ldw	r4,-12(fp)
   126b8:	0012a280 	call	12a28 <alt_find_dev>
   126bc:	e0bff815 	stw	r2,-32(fp)
   126c0:	e0bff817 	ldw	r2,-32(fp)
   126c4:	1000051e 	bne	r2,zero,126dc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   126c8:	e13ffd17 	ldw	r4,-12(fp)
   126cc:	0012ab80 	call	12ab8 <alt_find_file>
   126d0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   126d4:	00800044 	movi	r2,1
   126d8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   126dc:	e0bff817 	ldw	r2,-32(fp)
   126e0:	10002b26 	beq	r2,zero,12790 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   126e4:	e13ff817 	ldw	r4,-32(fp)
   126e8:	0012bc00 	call	12bc0 <alt_get_fd>
   126ec:	e0bff915 	stw	r2,-28(fp)
   126f0:	e0bff917 	ldw	r2,-28(fp)
   126f4:	1000030e 	bge	r2,zero,12704 <open+0x84>
    {
      status = index;
   126f8:	e0bff917 	ldw	r2,-28(fp)
   126fc:	e0bffa15 	stw	r2,-24(fp)
   12700:	00002506 	br	12798 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   12704:	01400304 	movi	r5,12
   12708:	e13ff917 	ldw	r4,-28(fp)
   1270c:	00132600 	call	13260 <__mulsi3>
   12710:	1007883a 	mov	r3,r2
   12714:	00800074 	movhi	r2,1
   12718:	10929d04 	addi	r2,r2,19060
   1271c:	1885883a 	add	r2,r3,r2
   12720:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   12724:	e0fffe17 	ldw	r3,-8(fp)
   12728:	00900034 	movhi	r2,16384
   1272c:	10bfffc4 	addi	r2,r2,-1
   12730:	1886703a 	and	r3,r3,r2
   12734:	e0bffc17 	ldw	r2,-16(fp)
   12738:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1273c:	e0bffb17 	ldw	r2,-20(fp)
   12740:	1000051e 	bne	r2,zero,12758 <open+0xd8>
   12744:	e13ffc17 	ldw	r4,-16(fp)
   12748:	00125940 	call	12594 <alt_file_locked>
   1274c:	e0bffa15 	stw	r2,-24(fp)
   12750:	e0bffa17 	ldw	r2,-24(fp)
   12754:	10001016 	blt	r2,zero,12798 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   12758:	e0bff817 	ldw	r2,-32(fp)
   1275c:	10800317 	ldw	r2,12(r2)
   12760:	10000826 	beq	r2,zero,12784 <open+0x104>
   12764:	e0bff817 	ldw	r2,-32(fp)
   12768:	10800317 	ldw	r2,12(r2)
   1276c:	e1ffff17 	ldw	r7,-4(fp)
   12770:	e1bffe17 	ldw	r6,-8(fp)
   12774:	e17ffd17 	ldw	r5,-12(fp)
   12778:	e13ffc17 	ldw	r4,-16(fp)
   1277c:	103ee83a 	callr	r2
   12780:	00000106 	br	12788 <open+0x108>
   12784:	0005883a 	mov	r2,zero
   12788:	e0bffa15 	stw	r2,-24(fp)
   1278c:	00000206 	br	12798 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   12790:	00bffb44 	movi	r2,-19
   12794:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   12798:	e0bffa17 	ldw	r2,-24(fp)
   1279c:	1000090e 	bge	r2,zero,127c4 <open+0x144>
  {
    alt_release_fd (index);  
   127a0:	e13ff917 	ldw	r4,-28(fp)
   127a4:	00127dc0 	call	127dc <alt_release_fd>
    ALT_ERRNO = -status;
   127a8:	00125580 	call	12558 <alt_get_errno>
   127ac:	1007883a 	mov	r3,r2
   127b0:	e0bffa17 	ldw	r2,-24(fp)
   127b4:	0085c83a 	sub	r2,zero,r2
   127b8:	18800015 	stw	r2,0(r3)
    return -1;
   127bc:	00bfffc4 	movi	r2,-1
   127c0:	00000106 	br	127c8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   127c4:	e0bff917 	ldw	r2,-28(fp)
}
   127c8:	e037883a 	mov	sp,fp
   127cc:	dfc00117 	ldw	ra,4(sp)
   127d0:	df000017 	ldw	fp,0(sp)
   127d4:	dec00204 	addi	sp,sp,8
   127d8:	f800283a 	ret

000127dc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   127dc:	defffc04 	addi	sp,sp,-16
   127e0:	dfc00315 	stw	ra,12(sp)
   127e4:	df000215 	stw	fp,8(sp)
   127e8:	dc000115 	stw	r16,4(sp)
   127ec:	df000204 	addi	fp,sp,8
   127f0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   127f4:	e0bffe17 	ldw	r2,-8(fp)
   127f8:	108000d0 	cmplti	r2,r2,3
   127fc:	1000111e 	bne	r2,zero,12844 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   12800:	04000074 	movhi	r16,1
   12804:	84129d04 	addi	r16,r16,19060
   12808:	e0bffe17 	ldw	r2,-8(fp)
   1280c:	01400304 	movi	r5,12
   12810:	1009883a 	mov	r4,r2
   12814:	00132600 	call	13260 <__mulsi3>
   12818:	8085883a 	add	r2,r16,r2
   1281c:	10800204 	addi	r2,r2,8
   12820:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   12824:	04000074 	movhi	r16,1
   12828:	84129d04 	addi	r16,r16,19060
   1282c:	e0bffe17 	ldw	r2,-8(fp)
   12830:	01400304 	movi	r5,12
   12834:	1009883a 	mov	r4,r2
   12838:	00132600 	call	13260 <__mulsi3>
   1283c:	8085883a 	add	r2,r16,r2
   12840:	10000015 	stw	zero,0(r2)
  }
}
   12844:	0001883a 	nop
   12848:	e6ffff04 	addi	sp,fp,-4
   1284c:	dfc00217 	ldw	ra,8(sp)
   12850:	df000117 	ldw	fp,4(sp)
   12854:	dc000017 	ldw	r16,0(sp)
   12858:	dec00304 	addi	sp,sp,12
   1285c:	f800283a 	ret

00012860 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   12860:	defffa04 	addi	sp,sp,-24
   12864:	df000515 	stw	fp,20(sp)
   12868:	df000504 	addi	fp,sp,20
   1286c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12870:	0005303a 	rdctl	r2,status
   12874:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12878:	e0fffc17 	ldw	r3,-16(fp)
   1287c:	00bfff84 	movi	r2,-2
   12880:	1884703a 	and	r2,r3,r2
   12884:	1001703a 	wrctl	status,r2
  
  return context;
   12888:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1288c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   12890:	e0bfff17 	ldw	r2,-4(fp)
   12894:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   12898:	e0bffd17 	ldw	r2,-12(fp)
   1289c:	10800017 	ldw	r2,0(r2)
   128a0:	e0fffd17 	ldw	r3,-12(fp)
   128a4:	18c00117 	ldw	r3,4(r3)
   128a8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   128ac:	e0bffd17 	ldw	r2,-12(fp)
   128b0:	10800117 	ldw	r2,4(r2)
   128b4:	e0fffd17 	ldw	r3,-12(fp)
   128b8:	18c00017 	ldw	r3,0(r3)
   128bc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   128c0:	e0bffd17 	ldw	r2,-12(fp)
   128c4:	e0fffd17 	ldw	r3,-12(fp)
   128c8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   128cc:	e0bffd17 	ldw	r2,-12(fp)
   128d0:	e0fffd17 	ldw	r3,-12(fp)
   128d4:	10c00015 	stw	r3,0(r2)
   128d8:	e0bffb17 	ldw	r2,-20(fp)
   128dc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   128e0:	e0bffe17 	ldw	r2,-8(fp)
   128e4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   128e8:	0001883a 	nop
   128ec:	e037883a 	mov	sp,fp
   128f0:	df000017 	ldw	fp,0(sp)
   128f4:	dec00104 	addi	sp,sp,4
   128f8:	f800283a 	ret

000128fc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   128fc:	defffb04 	addi	sp,sp,-20
   12900:	dfc00415 	stw	ra,16(sp)
   12904:	df000315 	stw	fp,12(sp)
   12908:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1290c:	d0a01317 	ldw	r2,-32692(gp)
   12910:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   12914:	d0a67117 	ldw	r2,-26172(gp)
   12918:	10800044 	addi	r2,r2,1
   1291c:	d0a67115 	stw	r2,-26172(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   12920:	00002e06 	br	129dc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   12924:	e0bffd17 	ldw	r2,-12(fp)
   12928:	10800017 	ldw	r2,0(r2)
   1292c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   12930:	e0bffd17 	ldw	r2,-12(fp)
   12934:	10800403 	ldbu	r2,16(r2)
   12938:	10803fcc 	andi	r2,r2,255
   1293c:	10000426 	beq	r2,zero,12950 <alt_tick+0x54>
   12940:	d0a67117 	ldw	r2,-26172(gp)
   12944:	1000021e 	bne	r2,zero,12950 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   12948:	e0bffd17 	ldw	r2,-12(fp)
   1294c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   12950:	e0bffd17 	ldw	r2,-12(fp)
   12954:	10800217 	ldw	r2,8(r2)
   12958:	d0e67117 	ldw	r3,-26172(gp)
   1295c:	18801d36 	bltu	r3,r2,129d4 <alt_tick+0xd8>
   12960:	e0bffd17 	ldw	r2,-12(fp)
   12964:	10800403 	ldbu	r2,16(r2)
   12968:	10803fcc 	andi	r2,r2,255
   1296c:	1000191e 	bne	r2,zero,129d4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   12970:	e0bffd17 	ldw	r2,-12(fp)
   12974:	10800317 	ldw	r2,12(r2)
   12978:	e0fffd17 	ldw	r3,-12(fp)
   1297c:	18c00517 	ldw	r3,20(r3)
   12980:	1809883a 	mov	r4,r3
   12984:	103ee83a 	callr	r2
   12988:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1298c:	e0bfff17 	ldw	r2,-4(fp)
   12990:	1000031e 	bne	r2,zero,129a0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   12994:	e13ffd17 	ldw	r4,-12(fp)
   12998:	00128600 	call	12860 <alt_alarm_stop>
   1299c:	00000d06 	br	129d4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   129a0:	e0bffd17 	ldw	r2,-12(fp)
   129a4:	10c00217 	ldw	r3,8(r2)
   129a8:	e0bfff17 	ldw	r2,-4(fp)
   129ac:	1887883a 	add	r3,r3,r2
   129b0:	e0bffd17 	ldw	r2,-12(fp)
   129b4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   129b8:	e0bffd17 	ldw	r2,-12(fp)
   129bc:	10c00217 	ldw	r3,8(r2)
   129c0:	d0a67117 	ldw	r2,-26172(gp)
   129c4:	1880032e 	bgeu	r3,r2,129d4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   129c8:	e0bffd17 	ldw	r2,-12(fp)
   129cc:	00c00044 	movi	r3,1
   129d0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   129d4:	e0bffe17 	ldw	r2,-8(fp)
   129d8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   129dc:	e0fffd17 	ldw	r3,-12(fp)
   129e0:	d0a01304 	addi	r2,gp,-32692
   129e4:	18bfcf1e 	bne	r3,r2,12924 <_gp+0xffff5d30>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   129e8:	0001883a 	nop
}
   129ec:	0001883a 	nop
   129f0:	e037883a 	mov	sp,fp
   129f4:	dfc00117 	ldw	ra,4(sp)
   129f8:	df000017 	ldw	fp,0(sp)
   129fc:	dec00204 	addi	sp,sp,8
   12a00:	f800283a 	ret

00012a04 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   12a04:	deffff04 	addi	sp,sp,-4
   12a08:	df000015 	stw	fp,0(sp)
   12a0c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   12a10:	000170fa 	wrctl	ienable,zero
}
   12a14:	0001883a 	nop
   12a18:	e037883a 	mov	sp,fp
   12a1c:	df000017 	ldw	fp,0(sp)
   12a20:	dec00104 	addi	sp,sp,4
   12a24:	f800283a 	ret

00012a28 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   12a28:	defffa04 	addi	sp,sp,-24
   12a2c:	dfc00515 	stw	ra,20(sp)
   12a30:	df000415 	stw	fp,16(sp)
   12a34:	df000404 	addi	fp,sp,16
   12a38:	e13ffe15 	stw	r4,-8(fp)
   12a3c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   12a40:	e0bfff17 	ldw	r2,-4(fp)
   12a44:	10800017 	ldw	r2,0(r2)
   12a48:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   12a4c:	e13ffe17 	ldw	r4,-8(fp)
   12a50:	0012f300 	call	12f30 <strlen>
   12a54:	10800044 	addi	r2,r2,1
   12a58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12a5c:	00000d06 	br	12a94 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   12a60:	e0bffc17 	ldw	r2,-16(fp)
   12a64:	10800217 	ldw	r2,8(r2)
   12a68:	e0fffd17 	ldw	r3,-12(fp)
   12a6c:	180d883a 	mov	r6,r3
   12a70:	e17ffe17 	ldw	r5,-8(fp)
   12a74:	1009883a 	mov	r4,r2
   12a78:	0012d6c0 	call	12d6c <memcmp>
   12a7c:	1000021e 	bne	r2,zero,12a88 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   12a80:	e0bffc17 	ldw	r2,-16(fp)
   12a84:	00000706 	br	12aa4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   12a88:	e0bffc17 	ldw	r2,-16(fp)
   12a8c:	10800017 	ldw	r2,0(r2)
   12a90:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12a94:	e0fffc17 	ldw	r3,-16(fp)
   12a98:	e0bfff17 	ldw	r2,-4(fp)
   12a9c:	18bff01e 	bne	r3,r2,12a60 <_gp+0xffff5e6c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   12aa0:	0005883a 	mov	r2,zero
}
   12aa4:	e037883a 	mov	sp,fp
   12aa8:	dfc00117 	ldw	ra,4(sp)
   12aac:	df000017 	ldw	fp,0(sp)
   12ab0:	dec00204 	addi	sp,sp,8
   12ab4:	f800283a 	ret

00012ab8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   12ab8:	defffb04 	addi	sp,sp,-20
   12abc:	dfc00415 	stw	ra,16(sp)
   12ac0:	df000315 	stw	fp,12(sp)
   12ac4:	df000304 	addi	fp,sp,12
   12ac8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   12acc:	d0a00c17 	ldw	r2,-32720(gp)
   12ad0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12ad4:	00003106 	br	12b9c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   12ad8:	e0bffd17 	ldw	r2,-12(fp)
   12adc:	10800217 	ldw	r2,8(r2)
   12ae0:	1009883a 	mov	r4,r2
   12ae4:	0012f300 	call	12f30 <strlen>
   12ae8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   12aec:	e0bffd17 	ldw	r2,-12(fp)
   12af0:	10c00217 	ldw	r3,8(r2)
   12af4:	e0bffe17 	ldw	r2,-8(fp)
   12af8:	10bfffc4 	addi	r2,r2,-1
   12afc:	1885883a 	add	r2,r3,r2
   12b00:	10800003 	ldbu	r2,0(r2)
   12b04:	10803fcc 	andi	r2,r2,255
   12b08:	1080201c 	xori	r2,r2,128
   12b0c:	10bfe004 	addi	r2,r2,-128
   12b10:	10800bd8 	cmpnei	r2,r2,47
   12b14:	1000031e 	bne	r2,zero,12b24 <alt_find_file+0x6c>
    {
      len -= 1;
   12b18:	e0bffe17 	ldw	r2,-8(fp)
   12b1c:	10bfffc4 	addi	r2,r2,-1
   12b20:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   12b24:	e0bffe17 	ldw	r2,-8(fp)
   12b28:	e0ffff17 	ldw	r3,-4(fp)
   12b2c:	1885883a 	add	r2,r3,r2
   12b30:	10800003 	ldbu	r2,0(r2)
   12b34:	10803fcc 	andi	r2,r2,255
   12b38:	1080201c 	xori	r2,r2,128
   12b3c:	10bfe004 	addi	r2,r2,-128
   12b40:	10800be0 	cmpeqi	r2,r2,47
   12b44:	1000081e 	bne	r2,zero,12b68 <alt_find_file+0xb0>
   12b48:	e0bffe17 	ldw	r2,-8(fp)
   12b4c:	e0ffff17 	ldw	r3,-4(fp)
   12b50:	1885883a 	add	r2,r3,r2
   12b54:	10800003 	ldbu	r2,0(r2)
   12b58:	10803fcc 	andi	r2,r2,255
   12b5c:	1080201c 	xori	r2,r2,128
   12b60:	10bfe004 	addi	r2,r2,-128
   12b64:	10000a1e 	bne	r2,zero,12b90 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   12b68:	e0bffd17 	ldw	r2,-12(fp)
   12b6c:	10800217 	ldw	r2,8(r2)
   12b70:	e0fffe17 	ldw	r3,-8(fp)
   12b74:	180d883a 	mov	r6,r3
   12b78:	e17fff17 	ldw	r5,-4(fp)
   12b7c:	1009883a 	mov	r4,r2
   12b80:	0012d6c0 	call	12d6c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   12b84:	1000021e 	bne	r2,zero,12b90 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   12b88:	e0bffd17 	ldw	r2,-12(fp)
   12b8c:	00000706 	br	12bac <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   12b90:	e0bffd17 	ldw	r2,-12(fp)
   12b94:	10800017 	ldw	r2,0(r2)
   12b98:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12b9c:	e0fffd17 	ldw	r3,-12(fp)
   12ba0:	d0a00c04 	addi	r2,gp,-32720
   12ba4:	18bfcc1e 	bne	r3,r2,12ad8 <_gp+0xffff5ee4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   12ba8:	0005883a 	mov	r2,zero
}
   12bac:	e037883a 	mov	sp,fp
   12bb0:	dfc00117 	ldw	ra,4(sp)
   12bb4:	df000017 	ldw	fp,0(sp)
   12bb8:	dec00204 	addi	sp,sp,8
   12bbc:	f800283a 	ret

00012bc0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   12bc0:	defffa04 	addi	sp,sp,-24
   12bc4:	dfc00515 	stw	ra,20(sp)
   12bc8:	df000415 	stw	fp,16(sp)
   12bcc:	dc000315 	stw	r16,12(sp)
   12bd0:	df000404 	addi	fp,sp,16
   12bd4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   12bd8:	00bffa04 	movi	r2,-24
   12bdc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12be0:	e03ffc15 	stw	zero,-16(fp)
   12be4:	00001d06 	br	12c5c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   12be8:	04000074 	movhi	r16,1
   12bec:	84129d04 	addi	r16,r16,19060
   12bf0:	e0bffc17 	ldw	r2,-16(fp)
   12bf4:	01400304 	movi	r5,12
   12bf8:	1009883a 	mov	r4,r2
   12bfc:	00132600 	call	13260 <__mulsi3>
   12c00:	8085883a 	add	r2,r16,r2
   12c04:	10800017 	ldw	r2,0(r2)
   12c08:	1000111e 	bne	r2,zero,12c50 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   12c0c:	04000074 	movhi	r16,1
   12c10:	84129d04 	addi	r16,r16,19060
   12c14:	e0bffc17 	ldw	r2,-16(fp)
   12c18:	01400304 	movi	r5,12
   12c1c:	1009883a 	mov	r4,r2
   12c20:	00132600 	call	13260 <__mulsi3>
   12c24:	8085883a 	add	r2,r16,r2
   12c28:	e0fffe17 	ldw	r3,-8(fp)
   12c2c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   12c30:	d0e01017 	ldw	r3,-32704(gp)
   12c34:	e0bffc17 	ldw	r2,-16(fp)
   12c38:	1880020e 	bge	r3,r2,12c44 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   12c3c:	e0bffc17 	ldw	r2,-16(fp)
   12c40:	d0a01015 	stw	r2,-32704(gp)
      }
      rc = i;
   12c44:	e0bffc17 	ldw	r2,-16(fp)
   12c48:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   12c4c:	00000606 	br	12c68 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12c50:	e0bffc17 	ldw	r2,-16(fp)
   12c54:	10800044 	addi	r2,r2,1
   12c58:	e0bffc15 	stw	r2,-16(fp)
   12c5c:	e0bffc17 	ldw	r2,-16(fp)
   12c60:	10800810 	cmplti	r2,r2,32
   12c64:	103fe01e 	bne	r2,zero,12be8 <_gp+0xffff5ff4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   12c68:	e0bffd17 	ldw	r2,-12(fp)
}
   12c6c:	e6ffff04 	addi	sp,fp,-4
   12c70:	dfc00217 	ldw	ra,8(sp)
   12c74:	df000117 	ldw	fp,4(sp)
   12c78:	dc000017 	ldw	r16,0(sp)
   12c7c:	dec00304 	addi	sp,sp,12
   12c80:	f800283a 	ret

00012c84 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   12c84:	defffe04 	addi	sp,sp,-8
   12c88:	df000115 	stw	fp,4(sp)
   12c8c:	df000104 	addi	fp,sp,4
   12c90:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   12c94:	e0bfff17 	ldw	r2,-4(fp)
   12c98:	10bffe84 	addi	r2,r2,-6
   12c9c:	10c00428 	cmpgeui	r3,r2,16
   12ca0:	18001a1e 	bne	r3,zero,12d0c <alt_exception_cause_generated_bad_addr+0x88>
   12ca4:	100690ba 	slli	r3,r2,2
   12ca8:	00800074 	movhi	r2,1
   12cac:	108b2f04 	addi	r2,r2,11452
   12cb0:	1885883a 	add	r2,r3,r2
   12cb4:	10800017 	ldw	r2,0(r2)
   12cb8:	1000683a 	jmp	r2
   12cbc:	00012cfc 	xorhi	zero,zero,1203
   12cc0:	00012cfc 	xorhi	zero,zero,1203
   12cc4:	00012d0c 	andi	zero,zero,1204
   12cc8:	00012d0c 	andi	zero,zero,1204
   12ccc:	00012d0c 	andi	zero,zero,1204
   12cd0:	00012cfc 	xorhi	zero,zero,1203
   12cd4:	00012d04 	movi	zero,1204
   12cd8:	00012d0c 	andi	zero,zero,1204
   12cdc:	00012cfc 	xorhi	zero,zero,1203
   12ce0:	00012cfc 	xorhi	zero,zero,1203
   12ce4:	00012d0c 	andi	zero,zero,1204
   12ce8:	00012cfc 	xorhi	zero,zero,1203
   12cec:	00012d04 	movi	zero,1204
   12cf0:	00012d0c 	andi	zero,zero,1204
   12cf4:	00012d0c 	andi	zero,zero,1204
   12cf8:	00012cfc 	xorhi	zero,zero,1203
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   12cfc:	00800044 	movi	r2,1
   12d00:	00000306 	br	12d10 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   12d04:	0005883a 	mov	r2,zero
   12d08:	00000106 	br	12d10 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   12d0c:	0005883a 	mov	r2,zero
  }
}
   12d10:	e037883a 	mov	sp,fp
   12d14:	df000017 	ldw	fp,0(sp)
   12d18:	dec00104 	addi	sp,sp,4
   12d1c:	f800283a 	ret

00012d20 <atexit>:
   12d20:	200b883a 	mov	r5,r4
   12d24:	000f883a 	mov	r7,zero
   12d28:	000d883a 	mov	r6,zero
   12d2c:	0009883a 	mov	r4,zero
   12d30:	0012fc81 	jmpi	12fc8 <__register_exitproc>

00012d34 <exit>:
   12d34:	defffe04 	addi	sp,sp,-8
   12d38:	000b883a 	mov	r5,zero
   12d3c:	dc000015 	stw	r16,0(sp)
   12d40:	dfc00115 	stw	ra,4(sp)
   12d44:	2021883a 	mov	r16,r4
   12d48:	00130e00 	call	130e0 <__call_exitprocs>
   12d4c:	00800074 	movhi	r2,1
   12d50:	10930704 	addi	r2,r2,19484
   12d54:	11000017 	ldw	r4,0(r2)
   12d58:	20800f17 	ldw	r2,60(r4)
   12d5c:	10000126 	beq	r2,zero,12d64 <exit+0x30>
   12d60:	103ee83a 	callr	r2
   12d64:	8009883a 	mov	r4,r16
   12d68:	00132880 	call	13288 <_exit>

00012d6c <memcmp>:
   12d6c:	01c000c4 	movi	r7,3
   12d70:	3980192e 	bgeu	r7,r6,12dd8 <memcmp+0x6c>
   12d74:	2144b03a 	or	r2,r4,r5
   12d78:	11c4703a 	and	r2,r2,r7
   12d7c:	10000f26 	beq	r2,zero,12dbc <memcmp+0x50>
   12d80:	20800003 	ldbu	r2,0(r4)
   12d84:	28c00003 	ldbu	r3,0(r5)
   12d88:	10c0151e 	bne	r2,r3,12de0 <memcmp+0x74>
   12d8c:	31bfff84 	addi	r6,r6,-2
   12d90:	01ffffc4 	movi	r7,-1
   12d94:	00000406 	br	12da8 <memcmp+0x3c>
   12d98:	20800003 	ldbu	r2,0(r4)
   12d9c:	28c00003 	ldbu	r3,0(r5)
   12da0:	31bfffc4 	addi	r6,r6,-1
   12da4:	10c00e1e 	bne	r2,r3,12de0 <memcmp+0x74>
   12da8:	21000044 	addi	r4,r4,1
   12dac:	29400044 	addi	r5,r5,1
   12db0:	31fff91e 	bne	r6,r7,12d98 <_gp+0xffff61a4>
   12db4:	0005883a 	mov	r2,zero
   12db8:	f800283a 	ret
   12dbc:	20c00017 	ldw	r3,0(r4)
   12dc0:	28800017 	ldw	r2,0(r5)
   12dc4:	18bfee1e 	bne	r3,r2,12d80 <_gp+0xffff618c>
   12dc8:	31bfff04 	addi	r6,r6,-4
   12dcc:	21000104 	addi	r4,r4,4
   12dd0:	29400104 	addi	r5,r5,4
   12dd4:	39bff936 	bltu	r7,r6,12dbc <_gp+0xffff61c8>
   12dd8:	303fe91e 	bne	r6,zero,12d80 <_gp+0xffff618c>
   12ddc:	003ff506 	br	12db4 <_gp+0xffff61c0>
   12de0:	10c5c83a 	sub	r2,r2,r3
   12de4:	f800283a 	ret

00012de8 <memcpy>:
   12de8:	defffd04 	addi	sp,sp,-12
   12dec:	dfc00215 	stw	ra,8(sp)
   12df0:	dc400115 	stw	r17,4(sp)
   12df4:	dc000015 	stw	r16,0(sp)
   12df8:	00c003c4 	movi	r3,15
   12dfc:	2005883a 	mov	r2,r4
   12e00:	1980452e 	bgeu	r3,r6,12f18 <memcpy+0x130>
   12e04:	2906b03a 	or	r3,r5,r4
   12e08:	18c000cc 	andi	r3,r3,3
   12e0c:	1800441e 	bne	r3,zero,12f20 <memcpy+0x138>
   12e10:	347ffc04 	addi	r17,r6,-16
   12e14:	8822d13a 	srli	r17,r17,4
   12e18:	28c00104 	addi	r3,r5,4
   12e1c:	23400104 	addi	r13,r4,4
   12e20:	8820913a 	slli	r16,r17,4
   12e24:	2b000204 	addi	r12,r5,8
   12e28:	22c00204 	addi	r11,r4,8
   12e2c:	84000504 	addi	r16,r16,20
   12e30:	2a800304 	addi	r10,r5,12
   12e34:	22400304 	addi	r9,r4,12
   12e38:	2c21883a 	add	r16,r5,r16
   12e3c:	2811883a 	mov	r8,r5
   12e40:	200f883a 	mov	r7,r4
   12e44:	41000017 	ldw	r4,0(r8)
   12e48:	1fc00017 	ldw	ra,0(r3)
   12e4c:	63c00017 	ldw	r15,0(r12)
   12e50:	39000015 	stw	r4,0(r7)
   12e54:	53800017 	ldw	r14,0(r10)
   12e58:	6fc00015 	stw	ra,0(r13)
   12e5c:	5bc00015 	stw	r15,0(r11)
   12e60:	4b800015 	stw	r14,0(r9)
   12e64:	18c00404 	addi	r3,r3,16
   12e68:	39c00404 	addi	r7,r7,16
   12e6c:	42000404 	addi	r8,r8,16
   12e70:	6b400404 	addi	r13,r13,16
   12e74:	63000404 	addi	r12,r12,16
   12e78:	5ac00404 	addi	r11,r11,16
   12e7c:	52800404 	addi	r10,r10,16
   12e80:	4a400404 	addi	r9,r9,16
   12e84:	1c3fef1e 	bne	r3,r16,12e44 <_gp+0xffff6250>
   12e88:	89c00044 	addi	r7,r17,1
   12e8c:	380e913a 	slli	r7,r7,4
   12e90:	310003cc 	andi	r4,r6,15
   12e94:	02c000c4 	movi	r11,3
   12e98:	11c7883a 	add	r3,r2,r7
   12e9c:	29cb883a 	add	r5,r5,r7
   12ea0:	5900212e 	bgeu	r11,r4,12f28 <memcpy+0x140>
   12ea4:	1813883a 	mov	r9,r3
   12ea8:	2811883a 	mov	r8,r5
   12eac:	200f883a 	mov	r7,r4
   12eb0:	42800017 	ldw	r10,0(r8)
   12eb4:	4a400104 	addi	r9,r9,4
   12eb8:	39ffff04 	addi	r7,r7,-4
   12ebc:	4abfff15 	stw	r10,-4(r9)
   12ec0:	42000104 	addi	r8,r8,4
   12ec4:	59fffa36 	bltu	r11,r7,12eb0 <_gp+0xffff62bc>
   12ec8:	213fff04 	addi	r4,r4,-4
   12ecc:	2008d0ba 	srli	r4,r4,2
   12ed0:	318000cc 	andi	r6,r6,3
   12ed4:	21000044 	addi	r4,r4,1
   12ed8:	2109883a 	add	r4,r4,r4
   12edc:	2109883a 	add	r4,r4,r4
   12ee0:	1907883a 	add	r3,r3,r4
   12ee4:	290b883a 	add	r5,r5,r4
   12ee8:	30000626 	beq	r6,zero,12f04 <memcpy+0x11c>
   12eec:	198d883a 	add	r6,r3,r6
   12ef0:	29c00003 	ldbu	r7,0(r5)
   12ef4:	18c00044 	addi	r3,r3,1
   12ef8:	29400044 	addi	r5,r5,1
   12efc:	19ffffc5 	stb	r7,-1(r3)
   12f00:	19bffb1e 	bne	r3,r6,12ef0 <_gp+0xffff62fc>
   12f04:	dfc00217 	ldw	ra,8(sp)
   12f08:	dc400117 	ldw	r17,4(sp)
   12f0c:	dc000017 	ldw	r16,0(sp)
   12f10:	dec00304 	addi	sp,sp,12
   12f14:	f800283a 	ret
   12f18:	2007883a 	mov	r3,r4
   12f1c:	003ff206 	br	12ee8 <_gp+0xffff62f4>
   12f20:	2007883a 	mov	r3,r4
   12f24:	003ff106 	br	12eec <_gp+0xffff62f8>
   12f28:	200d883a 	mov	r6,r4
   12f2c:	003fee06 	br	12ee8 <_gp+0xffff62f4>

00012f30 <strlen>:
   12f30:	208000cc 	andi	r2,r4,3
   12f34:	10002026 	beq	r2,zero,12fb8 <strlen+0x88>
   12f38:	20800007 	ldb	r2,0(r4)
   12f3c:	10002026 	beq	r2,zero,12fc0 <strlen+0x90>
   12f40:	2005883a 	mov	r2,r4
   12f44:	00000206 	br	12f50 <strlen+0x20>
   12f48:	10c00007 	ldb	r3,0(r2)
   12f4c:	18001826 	beq	r3,zero,12fb0 <strlen+0x80>
   12f50:	10800044 	addi	r2,r2,1
   12f54:	10c000cc 	andi	r3,r2,3
   12f58:	183ffb1e 	bne	r3,zero,12f48 <_gp+0xffff6354>
   12f5c:	10c00017 	ldw	r3,0(r2)
   12f60:	01ffbff4 	movhi	r7,65279
   12f64:	39ffbfc4 	addi	r7,r7,-257
   12f68:	00ca303a 	nor	r5,zero,r3
   12f6c:	01a02074 	movhi	r6,32897
   12f70:	19c7883a 	add	r3,r3,r7
   12f74:	31a02004 	addi	r6,r6,-32640
   12f78:	1946703a 	and	r3,r3,r5
   12f7c:	1986703a 	and	r3,r3,r6
   12f80:	1800091e 	bne	r3,zero,12fa8 <strlen+0x78>
   12f84:	10800104 	addi	r2,r2,4
   12f88:	10c00017 	ldw	r3,0(r2)
   12f8c:	19cb883a 	add	r5,r3,r7
   12f90:	00c6303a 	nor	r3,zero,r3
   12f94:	28c6703a 	and	r3,r5,r3
   12f98:	1986703a 	and	r3,r3,r6
   12f9c:	183ff926 	beq	r3,zero,12f84 <_gp+0xffff6390>
   12fa0:	00000106 	br	12fa8 <strlen+0x78>
   12fa4:	10800044 	addi	r2,r2,1
   12fa8:	10c00007 	ldb	r3,0(r2)
   12fac:	183ffd1e 	bne	r3,zero,12fa4 <_gp+0xffff63b0>
   12fb0:	1105c83a 	sub	r2,r2,r4
   12fb4:	f800283a 	ret
   12fb8:	2005883a 	mov	r2,r4
   12fbc:	003fe706 	br	12f5c <_gp+0xffff6368>
   12fc0:	0005883a 	mov	r2,zero
   12fc4:	f800283a 	ret

00012fc8 <__register_exitproc>:
   12fc8:	defffa04 	addi	sp,sp,-24
   12fcc:	dc000315 	stw	r16,12(sp)
   12fd0:	04000074 	movhi	r16,1
   12fd4:	84130704 	addi	r16,r16,19484
   12fd8:	80c00017 	ldw	r3,0(r16)
   12fdc:	dc400415 	stw	r17,16(sp)
   12fe0:	dfc00515 	stw	ra,20(sp)
   12fe4:	18805217 	ldw	r2,328(r3)
   12fe8:	2023883a 	mov	r17,r4
   12fec:	10003726 	beq	r2,zero,130cc <__register_exitproc+0x104>
   12ff0:	10c00117 	ldw	r3,4(r2)
   12ff4:	010007c4 	movi	r4,31
   12ff8:	20c00e16 	blt	r4,r3,13034 <__register_exitproc+0x6c>
   12ffc:	1a000044 	addi	r8,r3,1
   13000:	8800221e 	bne	r17,zero,1308c <__register_exitproc+0xc4>
   13004:	18c00084 	addi	r3,r3,2
   13008:	18c7883a 	add	r3,r3,r3
   1300c:	18c7883a 	add	r3,r3,r3
   13010:	12000115 	stw	r8,4(r2)
   13014:	10c7883a 	add	r3,r2,r3
   13018:	19400015 	stw	r5,0(r3)
   1301c:	0005883a 	mov	r2,zero
   13020:	dfc00517 	ldw	ra,20(sp)
   13024:	dc400417 	ldw	r17,16(sp)
   13028:	dc000317 	ldw	r16,12(sp)
   1302c:	dec00604 	addi	sp,sp,24
   13030:	f800283a 	ret
   13034:	00800034 	movhi	r2,0
   13038:	10800004 	addi	r2,r2,0
   1303c:	10002626 	beq	r2,zero,130d8 <__register_exitproc+0x110>
   13040:	01006404 	movi	r4,400
   13044:	d9400015 	stw	r5,0(sp)
   13048:	d9800115 	stw	r6,4(sp)
   1304c:	d9c00215 	stw	r7,8(sp)
   13050:	00000000 	call	0 <__alt_mem_memory-0x10000>
   13054:	d9400017 	ldw	r5,0(sp)
   13058:	d9800117 	ldw	r6,4(sp)
   1305c:	d9c00217 	ldw	r7,8(sp)
   13060:	10001d26 	beq	r2,zero,130d8 <__register_exitproc+0x110>
   13064:	81000017 	ldw	r4,0(r16)
   13068:	10000115 	stw	zero,4(r2)
   1306c:	02000044 	movi	r8,1
   13070:	22405217 	ldw	r9,328(r4)
   13074:	0007883a 	mov	r3,zero
   13078:	12400015 	stw	r9,0(r2)
   1307c:	20805215 	stw	r2,328(r4)
   13080:	10006215 	stw	zero,392(r2)
   13084:	10006315 	stw	zero,396(r2)
   13088:	883fde26 	beq	r17,zero,13004 <_gp+0xffff6410>
   1308c:	18c9883a 	add	r4,r3,r3
   13090:	2109883a 	add	r4,r4,r4
   13094:	1109883a 	add	r4,r2,r4
   13098:	21802215 	stw	r6,136(r4)
   1309c:	01800044 	movi	r6,1
   130a0:	12406217 	ldw	r9,392(r2)
   130a4:	30cc983a 	sll	r6,r6,r3
   130a8:	4992b03a 	or	r9,r9,r6
   130ac:	12406215 	stw	r9,392(r2)
   130b0:	21c04215 	stw	r7,264(r4)
   130b4:	01000084 	movi	r4,2
   130b8:	893fd21e 	bne	r17,r4,13004 <_gp+0xffff6410>
   130bc:	11006317 	ldw	r4,396(r2)
   130c0:	218cb03a 	or	r6,r4,r6
   130c4:	11806315 	stw	r6,396(r2)
   130c8:	003fce06 	br	13004 <_gp+0xffff6410>
   130cc:	18805304 	addi	r2,r3,332
   130d0:	18805215 	stw	r2,328(r3)
   130d4:	003fc606 	br	12ff0 <_gp+0xffff63fc>
   130d8:	00bfffc4 	movi	r2,-1
   130dc:	003fd006 	br	13020 <_gp+0xffff642c>

000130e0 <__call_exitprocs>:
   130e0:	defff504 	addi	sp,sp,-44
   130e4:	df000915 	stw	fp,36(sp)
   130e8:	dd400615 	stw	r21,24(sp)
   130ec:	dc800315 	stw	r18,12(sp)
   130f0:	dfc00a15 	stw	ra,40(sp)
   130f4:	ddc00815 	stw	r23,32(sp)
   130f8:	dd800715 	stw	r22,28(sp)
   130fc:	dd000515 	stw	r20,20(sp)
   13100:	dcc00415 	stw	r19,16(sp)
   13104:	dc400215 	stw	r17,8(sp)
   13108:	dc000115 	stw	r16,4(sp)
   1310c:	d9000015 	stw	r4,0(sp)
   13110:	2839883a 	mov	fp,r5
   13114:	04800044 	movi	r18,1
   13118:	057fffc4 	movi	r21,-1
   1311c:	00800074 	movhi	r2,1
   13120:	10930704 	addi	r2,r2,19484
   13124:	12000017 	ldw	r8,0(r2)
   13128:	45005217 	ldw	r20,328(r8)
   1312c:	44c05204 	addi	r19,r8,328
   13130:	a0001c26 	beq	r20,zero,131a4 <__call_exitprocs+0xc4>
   13134:	a0800117 	ldw	r2,4(r20)
   13138:	15ffffc4 	addi	r23,r2,-1
   1313c:	b8000d16 	blt	r23,zero,13174 <__call_exitprocs+0x94>
   13140:	14000044 	addi	r16,r2,1
   13144:	8421883a 	add	r16,r16,r16
   13148:	8421883a 	add	r16,r16,r16
   1314c:	84402004 	addi	r17,r16,128
   13150:	a463883a 	add	r17,r20,r17
   13154:	a421883a 	add	r16,r20,r16
   13158:	e0001e26 	beq	fp,zero,131d4 <__call_exitprocs+0xf4>
   1315c:	80804017 	ldw	r2,256(r16)
   13160:	e0801c26 	beq	fp,r2,131d4 <__call_exitprocs+0xf4>
   13164:	bdffffc4 	addi	r23,r23,-1
   13168:	843fff04 	addi	r16,r16,-4
   1316c:	8c7fff04 	addi	r17,r17,-4
   13170:	bd7ff91e 	bne	r23,r21,13158 <_gp+0xffff6564>
   13174:	00800034 	movhi	r2,0
   13178:	10800004 	addi	r2,r2,0
   1317c:	10000926 	beq	r2,zero,131a4 <__call_exitprocs+0xc4>
   13180:	a0800117 	ldw	r2,4(r20)
   13184:	1000301e 	bne	r2,zero,13248 <__call_exitprocs+0x168>
   13188:	a0800017 	ldw	r2,0(r20)
   1318c:	10003226 	beq	r2,zero,13258 <__call_exitprocs+0x178>
   13190:	a009883a 	mov	r4,r20
   13194:	98800015 	stw	r2,0(r19)
   13198:	00000000 	call	0 <__alt_mem_memory-0x10000>
   1319c:	9d000017 	ldw	r20,0(r19)
   131a0:	a03fe41e 	bne	r20,zero,13134 <_gp+0xffff6540>
   131a4:	dfc00a17 	ldw	ra,40(sp)
   131a8:	df000917 	ldw	fp,36(sp)
   131ac:	ddc00817 	ldw	r23,32(sp)
   131b0:	dd800717 	ldw	r22,28(sp)
   131b4:	dd400617 	ldw	r21,24(sp)
   131b8:	dd000517 	ldw	r20,20(sp)
   131bc:	dcc00417 	ldw	r19,16(sp)
   131c0:	dc800317 	ldw	r18,12(sp)
   131c4:	dc400217 	ldw	r17,8(sp)
   131c8:	dc000117 	ldw	r16,4(sp)
   131cc:	dec00b04 	addi	sp,sp,44
   131d0:	f800283a 	ret
   131d4:	a0800117 	ldw	r2,4(r20)
   131d8:	80c00017 	ldw	r3,0(r16)
   131dc:	10bfffc4 	addi	r2,r2,-1
   131e0:	15c01426 	beq	r2,r23,13234 <__call_exitprocs+0x154>
   131e4:	80000015 	stw	zero,0(r16)
   131e8:	183fde26 	beq	r3,zero,13164 <_gp+0xffff6570>
   131ec:	95c8983a 	sll	r4,r18,r23
   131f0:	a0806217 	ldw	r2,392(r20)
   131f4:	a5800117 	ldw	r22,4(r20)
   131f8:	2084703a 	and	r2,r4,r2
   131fc:	10000b26 	beq	r2,zero,1322c <__call_exitprocs+0x14c>
   13200:	a0806317 	ldw	r2,396(r20)
   13204:	2088703a 	and	r4,r4,r2
   13208:	20000c1e 	bne	r4,zero,1323c <__call_exitprocs+0x15c>
   1320c:	89400017 	ldw	r5,0(r17)
   13210:	d9000017 	ldw	r4,0(sp)
   13214:	183ee83a 	callr	r3
   13218:	a0800117 	ldw	r2,4(r20)
   1321c:	15bfbf1e 	bne	r2,r22,1311c <_gp+0xffff6528>
   13220:	98800017 	ldw	r2,0(r19)
   13224:	153fcf26 	beq	r2,r20,13164 <_gp+0xffff6570>
   13228:	003fbc06 	br	1311c <_gp+0xffff6528>
   1322c:	183ee83a 	callr	r3
   13230:	003ff906 	br	13218 <_gp+0xffff6624>
   13234:	a5c00115 	stw	r23,4(r20)
   13238:	003feb06 	br	131e8 <_gp+0xffff65f4>
   1323c:	89000017 	ldw	r4,0(r17)
   13240:	183ee83a 	callr	r3
   13244:	003ff406 	br	13218 <_gp+0xffff6624>
   13248:	a0800017 	ldw	r2,0(r20)
   1324c:	a027883a 	mov	r19,r20
   13250:	1029883a 	mov	r20,r2
   13254:	003fb606 	br	13130 <_gp+0xffff653c>
   13258:	0005883a 	mov	r2,zero
   1325c:	003ffb06 	br	1324c <_gp+0xffff6658>

00013260 <__mulsi3>:
   13260:	0005883a 	mov	r2,zero
   13264:	20000726 	beq	r4,zero,13284 <__mulsi3+0x24>
   13268:	20c0004c 	andi	r3,r4,1
   1326c:	2008d07a 	srli	r4,r4,1
   13270:	18000126 	beq	r3,zero,13278 <__mulsi3+0x18>
   13274:	1145883a 	add	r2,r2,r5
   13278:	294b883a 	add	r5,r5,r5
   1327c:	203ffa1e 	bne	r4,zero,13268 <_gp+0xffff6674>
   13280:	f800283a 	ret
   13284:	f800283a 	ret

00013288 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   13288:	defffd04 	addi	sp,sp,-12
   1328c:	df000215 	stw	fp,8(sp)
   13290:	df000204 	addi	fp,sp,8
   13294:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   13298:	0001883a 	nop
   1329c:	e0bfff17 	ldw	r2,-4(fp)
   132a0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   132a4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   132a8:	10000226 	beq	r2,zero,132b4 <_exit+0x2c>
    ALT_SIM_FAIL();
   132ac:	002af070 	cmpltui	zero,zero,43969
   132b0:	00000106 	br	132b8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   132b4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   132b8:	003fff06 	br	132b8 <_gp+0xffff66c4>
